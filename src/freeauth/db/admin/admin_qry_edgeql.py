# AUTOGENERATED FROM:
#     'queries/apps/create_application.edgeql'
#     'queries/orgs/create_department.edgeql'
#     'queries/orgs/create_enterprise.edgeql'
#     'queries/orgs/create_org_type.edgeql'
#     'queries/perms/create_permission.edgeql'
#     'queries/roles/create_role.edgeql'
#     'queries/users/create_user.edgeql'
#     'queries/apps/delete_application.edgeql'
#     'queries/orgs/delete_org_type.edgeql'
#     'queries/orgs/delete_organization.edgeql'
#     'queries/perms/delete_permission.edgeql'
#     'queries/roles/delete_role.edgeql'
#     'queries/users/delete_user.edgeql'
#     'queries/orgs/get_department_by_id_or_code.edgeql'
#     'queries/orgs/get_enterprise_by_id_or_code.edgeql'
#     'queries/orgs/get_org_type_by_id_or_code.edgeql'
#     'queries/orgs/get_organization_node.edgeql'
#     'queries/perms/get_permission_by_id_or_code.edgeql'
#     'queries/roles/get_role_by_id_or_code.edgeql'
#     'queries/users/get_user_by_id.edgeql'
#     'queries/orgs/organization_bind_users.edgeql'
#     'queries/orgs/organization_unbind_users.edgeql'
#     'queries/perms/perm_bind_roles.edgeql'
#     'queries/perms/perm_unbind_roles.edgeql'
#     'queries/orgs/query_org_types.edgeql'
#     'queries/perms/query_permission_tags.edgeql'
#     'queries/users/resign_user.edgeql'
#     'queries/roles/role_bind_users.edgeql'
#     'queries/roles/role_unbind_users.edgeql'
#     'queries/apps/update_application_status.edgeql'
#     'queries/orgs/update_department.edgeql'
#     'queries/orgs/update_enterprise.edgeql'
#     'queries/orgs/update_org_type.edgeql'
#     'queries/orgs/update_org_type_status.edgeql'
#     'queries/perms/update_permission.edgeql'
#     'queries/perms/update_permission_status.edgeql'
#     'queries/roles/update_role.edgeql'
#     'queries/roles/update_role_status.edgeql'
#     'queries/users/update_user.edgeql'
#     'queries/users/update_user_organization.edgeql'
#     'queries/users/update_user_roles.edgeql'
#     'queries/users/update_user_status.edgeql'
# WITH:
#     $ edgedb-py -I FreeAuth --target blocking --file admin_qry_edgeql.py


from __future__ import annotations
import dataclasses
import datetime
import edgedb
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_validators__(cls):
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class CreateApplicationResult(NoPydanticValidation):
    id: uuid.UUID
    name: str
    description: str | None
    secret_key: str | None
    is_deleted: bool
    created_at: datetime.datetime


@dataclasses.dataclass
class CreateDepartmentResult(NoPydanticValidation):
    id: uuid.UUID
    name: str
    code: str | None
    description: str | None
    parent: CreateDepartmentResultParent
    enterprise: CreateDepartmentResultEnterprise


@dataclasses.dataclass
class CreateDepartmentResultEnterprise(NoPydanticValidation):
    id: uuid.UUID
    name: str
    code: str | None


@dataclasses.dataclass
class CreateDepartmentResultParent(NoPydanticValidation):
    id: uuid.UUID
    name: str
    code: str | None


@dataclasses.dataclass
class CreateEnterpriseResult(NoPydanticValidation):
    id: uuid.UUID
    name: str
    code: str | None
    tax_id: str | None
    issuing_bank: str | None
    bank_account_number: str | None
    contact_address: str | None
    contact_phone_num: str | None


@dataclasses.dataclass
class CreateOrgTypeResult(NoPydanticValidation):
    id: uuid.UUID
    name: str
    code: str | None
    description: str | None
    is_deleted: bool
    is_protected: bool


@dataclasses.dataclass
class CreatePermissionResult(NoPydanticValidation):
    id: uuid.UUID
    name: str
    code: str
    description: str | None
    roles: list[CreatePermissionResultRolesItem]
    application: CreatePermissionResultApplication
    tags: list[CreatePermissionResultTagsItem]
    is_deleted: bool
    created_at: datetime.datetime


@dataclasses.dataclass
class CreatePermissionResultApplication(NoPydanticValidation):
    id: uuid.UUID
    name: str


@dataclasses.dataclass
class CreatePermissionResultRolesItem(NoPydanticValidation):
    id: uuid.UUID
    name: str


@dataclasses.dataclass
class CreatePermissionResultTagsItem(NoPydanticValidation):
    id: uuid.UUID
    name: str


@dataclasses.dataclass
class CreateRoleResult(NoPydanticValidation):
    id: uuid.UUID
    name: str
    code: str | None
    description: str | None
    org_type: CreateRoleResultOrgType | None
    is_deleted: bool
    created_at: datetime.datetime


@dataclasses.dataclass
class CreateRoleResultOrgType(NoPydanticValidation):
    id: uuid.UUID
    code: str | None
    name: str


@dataclasses.dataclass
class CreateUserResult(NoPydanticValidation):
    id: uuid.UUID
    name: str | None
    username: str | None
    email: str | None
    mobile: str | None
    org_type: CreateRoleResultOrgType | None
    departments: list[CreateUserResultDepartmentsItem]
    roles: list[CreateUserResultRolesItem]
    is_deleted: bool
    created_at: datetime.datetime
    last_login_at: datetime.datetime | None


@dataclasses.dataclass
class CreateUserResultDepartmentsItem(NoPydanticValidation):
    id: uuid.UUID
    code: str | None
    name: str


@dataclasses.dataclass
class CreateUserResultRolesItem(NoPydanticValidation):
    id: uuid.UUID
    code: str | None
    name: str


@dataclasses.dataclass
class DeleteApplicationResult(NoPydanticValidation):
    id: uuid.UUID


@dataclasses.dataclass
class DeleteOrgTypeResult(NoPydanticValidation):
    id: uuid.UUID
    name: str
    code: str | None


@dataclasses.dataclass
class DeleteOrganizationResult(NoPydanticValidation):
    id: uuid.UUID


@dataclasses.dataclass
class DeletePermissionResult(NoPydanticValidation):
    id: uuid.UUID


@dataclasses.dataclass
class DeleteRoleResult(NoPydanticValidation):
    id: uuid.UUID


@dataclasses.dataclass
class DeleteUserResult(NoPydanticValidation):
    id: uuid.UUID
    name: str | None


@dataclasses.dataclass
class GetOrganizationNodeResult(NoPydanticValidation):
    id: uuid.UUID
    name: str
    code: str | None
    description: str | None
    parent_id: uuid.UUID | None
    is_enterprise: bool
    has_children: bool


@dataclasses.dataclass
class GetPermissionByIdOrCodeResult(NoPydanticValidation):
    id: uuid.UUID
    name: str
    code: str
    description: str | None
    roles: list[GetPermissionByIdOrCodeResultRolesItem]
    application: GetPermissionByIdOrCodeResultApplication
    tags: list[GetPermissionByIdOrCodeResultTagsItem]
    is_deleted: bool
    created_at: datetime.datetime


@dataclasses.dataclass
class GetPermissionByIdOrCodeResultApplication(NoPydanticValidation):
    id: uuid.UUID
    name: str


@dataclasses.dataclass
class GetPermissionByIdOrCodeResultRolesItem(NoPydanticValidation):
    id: uuid.UUID
    name: str
    code: str | None
    description: str | None
    is_deleted: bool
    created_at: datetime.datetime


@dataclasses.dataclass
class GetPermissionByIdOrCodeResultTagsItem(NoPydanticValidation):
    id: uuid.UUID
    name: str


@dataclasses.dataclass
class GetUserByIdResult(NoPydanticValidation):
    id: uuid.UUID
    name: str | None
    username: str | None
    email: str | None
    mobile: str | None
    org_type: CreateRoleResultOrgType | None
    departments: list[GetUserByIdResultDepartmentsItem]
    roles: list[GetUserByIdResultRolesItem]
    is_deleted: bool
    created_at: datetime.datetime
    last_login_at: datetime.datetime | None


@dataclasses.dataclass
class GetUserByIdResultDepartmentsItem(NoPydanticValidation):
    id: uuid.UUID
    code: str | None
    name: str
    enterprise: GetUserByIdResultDepartmentsItemEnterprise | None
    org_type: GetUserByIdResultDepartmentsItemEnterprise | None


@dataclasses.dataclass
class GetUserByIdResultDepartmentsItemEnterprise(NoPydanticValidation):
    id: uuid.UUID
    name: str


@dataclasses.dataclass
class GetUserByIdResultRolesItem(NoPydanticValidation):
    id: uuid.UUID
    code: str | None
    name: str
    description: str | None
    is_deleted: bool
    org_type: CreateRoleResultOrgType | None


@dataclasses.dataclass
class UpdateApplicationStatusResult(NoPydanticValidation):
    id: uuid.UUID
    name: str
    is_deleted: bool


@dataclasses.dataclass
class UpdateOrgTypeStatusResult(NoPydanticValidation):
    id: uuid.UUID
    name: str
    code: str | None
    is_deleted: bool


@dataclasses.dataclass
class UpdatePermissionStatusResult(NoPydanticValidation):
    id: uuid.UUID
    name: str
    code: str
    is_deleted: bool


@dataclasses.dataclass
class UpdateRoleStatusResult(NoPydanticValidation):
    id: uuid.UUID
    name: str
    code: str | None
    is_deleted: bool


@dataclasses.dataclass
class UpdateUserStatusResult(NoPydanticValidation):
    id: uuid.UUID
    name: str | None
    is_deleted: bool


def create_application(
    executor: edgedb.Executor,
    *,
    name: str,
    description: str | None,
) -> CreateApplicationResult:
    return executor.query_single(
        """\
        select (
            insert Application {
                name := <str>$name,
                description := <optional str>$description,
            }
        ) {
            name,
            description,
            secret_key,
            is_deleted,
            created_at
        }\
        """,
        name=name,
        description=description,
    )


def create_department(
    executor: edgedb.Executor,
    *,
    parent_id: uuid.UUID,
    name: str,
    code: str | None,
    description: str | None,
) -> CreateDepartmentResult | None:
    return executor.query_single(
        """\
        WITH
            parent := (
                SELECT Organization FILTER .id = <uuid>$parent_id
            ),
            enterprise := assert_single((
                SELECT Enterprise FILTER (
                    .id = (
                        # https://github.com/edgedb/edgedb/issues/5474
                        # parent[is Enterprise].id ??
                        parent[is Enterprise].id if exists parent[is Enterprise] else

                        parent[is Department].enterprise.id
                    )
                )
            ))
        FOR _ IN (
            SELECT true FILTER EXISTS parent
        ) UNION (
            SELECT (
                INSERT Department {
                    name := <str>$name,
                    code := <optional str>$code,
                    description := <optional str>$description,
                    enterprise := enterprise,
                    parent := parent,
                    ancestors := DISTINCT (parent UNION parent.ancestors)
                }
            ) {
                name,
                code,
                description,
                parent: {
                    name,
                    code
                },
                enterprise: {
                    name,
                    code,
                }
            }
        );\
        """,
        parent_id=parent_id,
        name=name,
        code=code,
        description=description,
    )


def create_enterprise(
    executor: edgedb.Executor,
    *,
    org_type_id: uuid.UUID,
    name: str,
    code: str | None,
    tax_id: str | None,
    issuing_bank: str | None,
    bank_account_number: str | None,
    contact_address: str | None,
    contact_phone_num: str | None,
) -> CreateEnterpriseResult | None:
    return executor.query_single(
        """\
        WITH
            org_type := (
                SELECT OrganizationType FILTER .id = <uuid>$org_type_id
            )
        FOR _ IN (
            SELECT true FILTER EXISTS org_type
        ) UNION (
            SELECT (
                INSERT Enterprise {
                    name := <str>$name,
                    code := <optional str>$code,
                    tax_id := <optional str>$tax_id,
                    issuing_bank := <optional str>$issuing_bank,
                    bank_account_number := <optional str>$bank_account_number,
                    contact_address := <optional str>$contact_address,
                    contact_phone_num := <optional str>$contact_phone_num,
                    org_type := org_type,
                    ancestors := ( SELECT org_type )
                }
            ) {
                name,
                code,
                tax_id,
                issuing_bank,
                bank_account_number,
                contact_address,
                contact_phone_num
            }
        );\
        """,
        org_type_id=org_type_id,
        name=name,
        code=code,
        tax_id=tax_id,
        issuing_bank=issuing_bank,
        bank_account_number=bank_account_number,
        contact_address=contact_address,
        contact_phone_num=contact_phone_num,
    )


def create_org_type(
    executor: edgedb.Executor,
    *,
    name: str,
    code: str,
    description: str | None,
) -> CreateOrgTypeResult:
    return executor.query_single(
        """\
        WITH
            name := <str>$name,
            code := <str>$code,
            description := <optional str>$description
        SELECT (
            INSERT OrganizationType {
                name := name,
                code := code,
                description := description
            }
        ) { name, code, description, is_deleted, is_protected };\
        """,
        name=name,
        code=code,
        description=description,
    )


def create_permission(
    executor: edgedb.Executor,
    *,
    name: str,
    code: str,
    description: str | None,
    application_id: uuid.UUID,
    tags: list[str] | None,
) -> CreatePermissionResult:
    return executor.query_single(
        """\
        with
            name := <str>$name,
            code := <str>$code,
            description := <optional str>$description,
            application_id := <uuid>$application_id,
            tags := <optional array<str>>$tags
        select (
            insert Permission {
                name := name,
                code := code,
                description := description,
                application := (
                    select Application filter (
                        .id = application_id
                    )
                ),
                tags :=  (
                    for item in array_unpack(tags) union (
                        insert Tag {
                            name := item,
                            tag_type := TagType.Permission
                        } unless conflict on .name
                        else (
                            select Tag filter .name = item and .tag_type = TagType.Permission
                        )
                    )
                )
            }
        ) {
            name,
            code,
            description,
            roles: { name },
            application: { name },
            tags: { name },
            is_deleted,
            created_at
        }\
        """,
        name=name,
        code=code,
        description=description,
        application_id=application_id,
        tags=tags,
    )


def create_role(
    executor: edgedb.Executor,
    *,
    name: str,
    code: str | None,
    description: str | None,
    org_type_id: uuid.UUID | None,
) -> CreateRoleResult:
    return executor.query_single(
        """\
        SELECT (
            INSERT Role {
                name := <str>$name,
                code := <optional str>$code,
                description := <optional str>$description,
                org_type := (
                    SELECT OrganizationType
                    FILTER .id = <optional uuid>$org_type_id
                )
            }
        ) {
            name,
            code,
            description,
            org_type: {
                code,
                name,
            },
            is_deleted,
            created_at
        };\
        """,
        name=name,
        code=code,
        description=description,
        org_type_id=org_type_id,
    )


def create_user(
    executor: edgedb.Executor,
    *,
    name: str | None,
    username: str | None,
    email: str | None,
    mobile: str | None,
    hashed_password: str | None,
    organization_ids: list[uuid.UUID] | None,
    org_type_id: uuid.UUID | None,
) -> CreateUserResult:
    return executor.query_single(
        """\
        WITH
            name := <optional str>$name,
            username := <optional str>$username,
            email := <optional str>$email,
            mobile := <optional str>$mobile,
            hashed_password := <optional str>$hashed_password,
            organization_ids := <optional array<uuid>>$organization_ids,
            org_type := (
                SELECT OrganizationType FILTER (
                    .id = <optional uuid>$org_type_id
                )
            ),
            organizations := (
                SELECT Organization
                FILTER
                    ( Organization IS NOT OrganizationType ) AND
                    (
                        false IF NOT EXISTS org_type ELSE
                        (
                            .id IN array_unpack(organization_ids) AND
                            org_type IN .ancestors
                        )
                    )
            )
        select (
            insert User {
                name := name,
                username := username,
                email := email,
                mobile := mobile,
                hashed_password := hashed_password,
                org_type := org_type,
                directly_organizations := organizations
            }
        ) {
            name,
            username,
            email,
            mobile,
            org_type: { code, name },
            departments := (
                SELECT .directly_organizations { code, name }
            ),
            roles: { code, name },
            is_deleted,
            created_at,
            last_login_at
        };\
        """,
        name=name,
        username=username,
        email=email,
        mobile=mobile,
        hashed_password=hashed_password,
        organization_ids=organization_ids,
        org_type_id=org_type_id,
    )


def delete_application(
    executor: edgedb.Executor,
    *,
    ids: list[uuid.UUID],
) -> list[DeleteApplicationResult]:
    return executor.query(
        """\
        delete Application
        filter .id in array_unpack(<array<uuid>>$ids) and not .is_protected\
        """,
        ids=ids,
    )


def delete_org_type(
    executor: edgedb.Executor,
    *,
    ids: list[uuid.UUID],
) -> list[DeleteOrgTypeResult]:
    return executor.query(
        """\
        SELECT (
            DELETE OrganizationType
            FILTER .id in array_unpack(<array<uuid>>$ids) AND NOT .is_protected
        ) { name, code };\
        """,
        ids=ids,
    )


def delete_organization(
    executor: edgedb.Executor,
    *,
    ids: list[uuid.UUID],
) -> list[DeleteOrganizationResult]:
    return executor.query(
        """\
        DELETE Organization FILTER .id in array_unpack(<array<uuid>>$ids);\
        """,
        ids=ids,
    )


def delete_permission(
    executor: edgedb.Executor,
    *,
    ids: list[uuid.UUID],
) -> list[DeletePermissionResult]:
    return executor.query(
        """\
        delete Permission filter .id in array_unpack(<array<uuid>>$ids);\
        """,
        ids=ids,
    )


def delete_role(
    executor: edgedb.Executor,
    *,
    ids: list[uuid.UUID],
) -> list[DeleteRoleResult]:
    return executor.query(
        """\
        DELETE Role FILTER .id in array_unpack(<array<uuid>>$ids);\
        """,
        ids=ids,
    )


def delete_user(
    executor: edgedb.Executor,
    *,
    user_ids: list[uuid.UUID],
) -> list[DeleteUserResult]:
    return executor.query(
        """\
        SELECT (
            DELETE User FILTER .id in array_unpack(<array<uuid>>$user_ids)
        ) { name } ORDER BY .created_at DESC;\
        """,
        user_ids=user_ids,
    )


def get_department_by_id_or_code(
    executor: edgedb.Executor,
    *,
    id: uuid.UUID | None,
    code: str | None,
    enterprise_id: uuid.UUID | None,
) -> CreateDepartmentResult | None:
    return executor.query_single(
        """\
        WITH
            id := <optional uuid>$id,
            code := <optional str>$code,
            enterprise_id := <optional uuid>$enterprise_id
        SELECT assert_single(
            (
                SELECT Department {
                    name,
                    code,
                    description,
                    parent: {
                        name,
                        code
                    },
                    enterprise: {
                        name,
                        code,
                    }
                }
                FILTER
                    (.id = id) ??
                    (.code ?= code AND .enterprise.id = enterprise_id)
            )
        );\
        """,
        id=id,
        code=code,
        enterprise_id=enterprise_id,
    )


def get_enterprise_by_id_or_code(
    executor: edgedb.Executor,
    *,
    id: uuid.UUID | None,
    code: str | None,
    org_type_id: uuid.UUID | None,
    org_type_code: str | None,
) -> CreateEnterpriseResult | None:
    return executor.query_single(
        """\
        WITH
            id := <optional uuid>$id,
            code := <optional str>$code,
            org_type_id := <optional uuid>$org_type_id,
            org_type_code := <optional str>$org_type_code
        SELECT assert_single(
            (
                SELECT Enterprise {
                    name,
                    code,
                    tax_id,
                    issuing_bank,
                    bank_account_number,
                    contact_address,
                    contact_phone_num
                }
                FILTER
                    (.id = id) ??
                    (.code ?= code AND .org_type.id = org_type_id) ??
                    (.code ?= code AND .org_type.code = org_type_code)
            )
        );\
        """,
        id=id,
        code=code,
        org_type_id=org_type_id,
        org_type_code=org_type_code,
    )


def get_org_type_by_id_or_code(
    executor: edgedb.Executor,
    *,
    id: uuid.UUID | None,
    code: str | None,
) -> CreateOrgTypeResult | None:
    return executor.query_single(
        """\
        WITH
            id := <optional uuid>$id,
            code := <optional str>$code
        SELECT assert_single(
            (
                SELECT OrganizationType {
                    name,
                    code,
                    description,
                    is_deleted,
                    is_protected
                }
                FILTER (.id = id) ?? (.code = code)
            )
        );\
        """,
        id=id,
        code=code,
    )


def get_organization_node(
    executor: edgedb.Executor,
    *,
    org_type_id: uuid.UUID | None,
    org_type_code: str | None,
    parent_id: uuid.UUID | None,
) -> list[GetOrganizationNodeResult]:
    return executor.query(
        """\
        WITH
            ot_id := <optional uuid>$org_type_id,
            ot_code := <optional str>$org_type_code,
            parent_id := <optional uuid>$parent_id
        SELECT
            Organization {
                name,
                code,
                [IS Department].description,
                parent_id := [IS Department].parent.id,
                is_enterprise := Organization is Enterprise,
                has_children := EXISTS .directly_children
            }
        FILTER (
            [IS Department].parent.id ?= parent_id IF EXISTS parent_id ELSE
            [IS Enterprise].org_type.id ?= ot_id IF EXISTS ot_id ELSE
            ([IS Enterprise].org_type.code = ot_code)
        )
        ORDER BY .created_at;\
        """,
        org_type_id=org_type_id,
        org_type_code=org_type_code,
        parent_id=parent_id,
    )


def get_permission_by_id_or_code(
    executor: edgedb.Executor,
    *,
    id: uuid.UUID | None,
    code: str | None,
) -> GetPermissionByIdOrCodeResult | None:
    return executor.query_single(
        """\
        with
            id := <optional uuid>$id,
            code := <optional str>$code
        select assert_single(
            (
                select Permission {
                    name,
                    code,
                    description,
                    roles: {
                        id,
                        name,
                        code,
                        description,
                        is_deleted,
                        created_at
                    },
                    application: { id, name },
                    tags: { id, name },
                    is_deleted,
                    created_at
                }
                filter (.id = id) ?? (.code_upper = str_upper(code))
            )
        );\
        """,
        id=id,
        code=code,
    )


def get_role_by_id_or_code(
    executor: edgedb.Executor,
    *,
    id: uuid.UUID | None,
    code: str | None,
) -> CreateRoleResult | None:
    return executor.query_single(
        """\
        WITH
            id := <optional uuid>$id,
            code := <optional str>$code
        SELECT assert_single(
            (
                SELECT Role {
                    name,
                    code,
                    description,
                    org_type: {
                        code,
                        name,
                    },
                    is_deleted,
                    created_at
                }
                FILTER (.id = id) ?? (.code_upper = str_upper(code))
            )
        );\
        """,
        id=id,
        code=code,
    )


def get_user_by_id(
    executor: edgedb.Executor,
    *,
    id: uuid.UUID,
) -> GetUserByIdResult | None:
    return executor.query_single(
        """\
        SELECT
            User {
                name,
                username,
                email,
                mobile,
                org_type: { code, name },
                departments := (
                    SELECT .directly_organizations {
                        id,
                        code,
                        name,
                        enterprise := assert_single(.ancestors {
                            id,
                            name
                        } FILTER EXISTS [is Enterprise]),
                        org_type := assert_single(.ancestors {
                            id,
                            name
                        } FILTER EXISTS [is OrganizationType])
                    }
                ),
                roles: {
                    id,
                    code,
                    name,
                    description,
                    is_deleted,
                    org_type: { code, name }
                },
                is_deleted,
                created_at,
                last_login_at
            }
        FILTER .id = <uuid>$id;\
        """,
        id=id,
    )


def organization_bind_users(
    executor: edgedb.Executor,
    *,
    user_ids: list[uuid.UUID],
    organization_ids: list[uuid.UUID],
    org_type_id: uuid.UUID,
) -> list[CreateUserResult]:
    return executor.query(
        """\
        WITH
            user_ids := <array<uuid>>$user_ids,
            organization_ids := <array<uuid>>$organization_ids,
            org_type := (
                SELECT OrganizationType FILTER (
                    .id = <uuid>$org_type_id
                )
            ),
            organizations := (
                SELECT Organization
                FILTER
                    ( Organization IS NOT OrganizationType ) AND
                    (
                        false IF NOT EXISTS org_type ELSE
                        (
                            .id IN array_unpack(organization_ids) AND
                            org_type IN .ancestors
                        )
                    )
            )
        SELECT (
            UPDATE User FILTER
                .id in array_unpack(user_ids) AND
                (
                    NOT EXISTS .org_type OR
                    .org_type ?= org_type
                )
            SET {
                org_type := org_type,
                directly_organizations += organizations
            }
        ) {
            name,
            username,
            email,
            mobile,
            org_type: { code, name },
            departments := (
                SELECT .directly_organizations { code, name }
            ),
            roles: { code, name },
            is_deleted,
            created_at,
            last_login_at
        };\
        """,
        user_ids=user_ids,
        organization_ids=organization_ids,
        org_type_id=org_type_id,
    )


def organization_unbind_users(
    executor: edgedb.Executor,
    *,
    user_ids: list[uuid.UUID],
    organization_ids: list[uuid.UUID],
) -> list[CreateUserResult]:
    return executor.query(
        """\
        with
            user_ids := <array<uuid>>$user_ids,
            organization_ids := <array<uuid>>$organization_ids,
            organizations := (
                select Organization
                filter .id in array_unpack(organization_ids)
            )
        select (
            update User filter .id in array_unpack(user_ids)
            set {
                org_type := .org_type
                if array_agg(
                    User.directly_organizations) != array_agg(organizations)
                else {},
                directly_organizations -= organizations,
                roles -= .org_type.roles
                if array_agg(
                    User.directly_organizations) = array_agg(organizations)
                else {},
            }
        ) {
            name,
            username,
            email,
            mobile,
            org_type: { code, name },
            departments := (
                select .directly_organizations { code, name }
            ),
            roles: { code, name },
            is_deleted,
            created_at,
            last_login_at
        };\
        """,
        user_ids=user_ids,
        organization_ids=organization_ids,
    )


def perm_bind_roles(
    executor: edgedb.Executor,
    *,
    role_ids: list[uuid.UUID],
    permission_ids: list[uuid.UUID],
) -> list[CreateRoleResult]:
    return executor.query(
        """\
        with
            role_ids := <array<uuid>>$role_ids,
            permission_ids := <array<uuid>>$permission_ids
        select (
            update Role filter .id in array_unpack(role_ids)
            set {
                permissions += (
                    select Permission
                    filter .id in array_unpack(permission_ids)
                )
            }
        ) {
            name,
            code,
            description,
            org_type: {
                code,
                name,
            },
            is_deleted,
            created_at
        };\
        """,
        role_ids=role_ids,
        permission_ids=permission_ids,
    )


def perm_unbind_roles(
    executor: edgedb.Executor,
    *,
    role_ids: list[uuid.UUID],
    permission_ids: list[uuid.UUID],
) -> list[CreateRoleResult]:
    return executor.query(
        """\
        with
            role_ids := <array<uuid>>$role_ids,
            permission_ids := <array<uuid>>$permission_ids
        select (
            update Role filter .id in array_unpack(role_ids)
            set {
                permissions -= (
                    select Permission
                    filter .id in array_unpack(permission_ids)
                )
            }
        ) {
            name,
            code,
            description,
            org_type: {
                code,
                name,
            },
            is_deleted,
            created_at
        };\
        """,
        role_ids=role_ids,
        permission_ids=permission_ids,
    )


def query_org_types(
    executor: edgedb.Executor,
) -> list[CreateOrgTypeResult]:
    return executor.query(
        """\
        SELECT OrganizationType {
            name, code, description, is_deleted, is_protected
        } ORDER BY
            .is_deleted THEN
            .is_protected DESC THEN
            .code;\
        """,
    )


def query_permission_tags(
    executor: edgedb.Executor,
) -> list[GetPermissionByIdOrCodeResultTagsItem]:
    return executor.query(
        """\
        select Tag {
            id,
            name
        } filter (.tag_type = TagType.Permission)\
        """,
    )


def resign_user(
    executor: edgedb.Executor,
    *,
    is_deleted: bool | None,
    user_ids: list[uuid.UUID],
) -> list[DeleteUserResult]:
    return executor.query(
        """\
        SELECT (
            WITH is_deleted := <optional bool>$is_deleted,
            UPDATE User FILTER .id in array_unpack(<array<uuid>>$user_ids)
            SET {
                directly_organizations := {},
                org_type := {},
                roles := {},
                deleted_at := (
                    datetime_of_transaction() IF is_deleted ELSE .deleted_at
                )
            }
        ) { name } ORDER BY .created_at DESC;\
        """,
        is_deleted=is_deleted,
        user_ids=user_ids,
    )


def role_bind_users(
    executor: edgedb.Executor,
    *,
    user_ids: list[uuid.UUID],
    role_ids: list[uuid.UUID],
) -> list[CreateUserResult]:
    return executor.query(
        """\
        WITH
            user_ids := <array<uuid>>$user_ids,
            role_ids := <array<uuid>>$role_ids
        SELECT (
            UPDATE User FILTER .id in array_unpack(user_ids)
            SET {
                roles += (
                    SELECT Role
                    FILTER
                        .id IN array_unpack(role_ids) AND
                        (
                            NOT EXISTS .org_type OR
                            .org_type ?= User.org_type
                        )
                )
            }
        ) {
            name,
            username,
            email,
            mobile,
            org_type: { code, name },
            departments := (
                SELECT .directly_organizations { code, name }
            ),
            roles: { code, name },
            is_deleted,
            created_at,
            last_login_at
        };\
        """,
        user_ids=user_ids,
        role_ids=role_ids,
    )


def role_unbind_users(
    executor: edgedb.Executor,
    *,
    user_ids: list[uuid.UUID],
    role_ids: list[uuid.UUID],
) -> list[CreateUserResult]:
    return executor.query(
        """\
        WITH
            user_ids := <array<uuid>>$user_ids,
            role_ids := <array<uuid>>$role_ids
        SELECT (
            UPDATE User FILTER .id in array_unpack(user_ids)
            SET {
                roles -= (
                    SELECT Role
                    FILTER .id IN array_unpack(role_ids)
                )
            }
        ) {
            name,
            username,
            email,
            mobile,
            org_type: { code, name },
            departments := (
                SELECT .directly_organizations { code, name }
            ),
            roles: { code, name },
            is_deleted,
            created_at,
            last_login_at
        };\
        """,
        user_ids=user_ids,
        role_ids=role_ids,
    )


def update_application_status(
    executor: edgedb.Executor,
    *,
    is_deleted: bool,
    ids: list[uuid.UUID],
) -> list[UpdateApplicationStatusResult]:
    return executor.query(
        """\
        with
            is_deleted := <bool>$is_deleted
        select (
            update Application
            filter .id in array_unpack(<array<uuid>>$ids)
            set {
                deleted_at := datetime_of_transaction() if is_deleted else {}
            }
        ) { name, is_deleted };\
        """,
        is_deleted=is_deleted,
        ids=ids,
    )


def update_department(
    executor: edgedb.Executor,
    *,
    id: uuid.UUID | None,
    current_code: str | None,
    enterprise_id: uuid.UUID | None,
    parent_id: uuid.UUID,
    name: str,
    code: str | None,
    description: str | None,
) -> CreateDepartmentResult | None:
    return executor.query_single(
        """\
        WITH
            id := <optional uuid>$id,
            current_code := <optional str>$current_code,
            enterprise_id := <optional uuid>$enterprise_id,
            parent := (
                SELECT Organization FILTER .id = <uuid>$parent_id
            ),
            parent_is_enterprise := EXISTS parent[is Enterprise],
            enterprise := assert_single((
                SELECT Enterprise FILTER .id = (
                    parent[is Enterprise].id IF parent_is_enterprise ELSE
                    parent[is Department].enterprise.id
                )
            )),
            department := assert_single((
                SELECT Department
                FILTER
                    (.id = id) ??
                    (
                        .code ?= current_code AND
                        .enterprise.id = enterprise_id
                    ) ??
                    false
            ))
        SELECT (
            UPDATE department
            SET {
                name := <str>$name,
                code := <optional str>$code,
                description := <optional str>$description,
                enterprise := enterprise,
                parent := parent,
                ancestors := (
                    SELECT DISTINCT (
                        SELECT .parent UNION .parent.ancestors
                    )
                )
            }
        ) {
            name,
            code,
            description,
            parent: {
                name,
                code
            },
            enterprise: {
                name,
                code,
            }
        };\
        """,
        id=id,
        current_code=current_code,
        enterprise_id=enterprise_id,
        parent_id=parent_id,
        name=name,
        code=code,
        description=description,
    )


def update_enterprise(
    executor: edgedb.Executor,
    *,
    id: uuid.UUID | None,
    current_code: str | None,
    org_type_id: uuid.UUID | None,
    org_type_code: str | None,
    name: str,
    code: str | None,
    tax_id: str | None,
    issuing_bank: str | None,
    bank_account_number: str | None,
    contact_address: str | None,
    contact_phone_num: str | None,
) -> CreateEnterpriseResult | None:
    return executor.query_single(
        """\
        WITH
            id := <optional uuid>$id,
            current_code := <optional str>$current_code,
            org_type_id := <optional uuid>$org_type_id,
            org_type_code := <optional str>$org_type_code,
            enterprise := assert_single((
                SELECT Enterprise
                FILTER
                    (.id = id) ??
                    (.code ?= current_code AND .org_type.id = org_type_id) ??
                    (
                        .code ?= current_code AND
                        .org_type.code = org_type_code
                    ) ??
                    false
            ))
        SELECT (
            UPDATE enterprise
            SET {
                name := <str>$name,
                code := <optional str>$code,
                tax_id := <optional str>$tax_id,
                issuing_bank := <optional str>$issuing_bank,
                bank_account_number := <optional str>$bank_account_number,
                contact_address := <optional str>$contact_address,
                contact_phone_num := <optional str>$contact_phone_num,
            }
        ) {
            name,
            code,
            tax_id,
            issuing_bank,
            bank_account_number,
            contact_address,
            contact_phone_num
        };\
        """,
        id=id,
        current_code=current_code,
        org_type_id=org_type_id,
        org_type_code=org_type_code,
        name=name,
        code=code,
        tax_id=tax_id,
        issuing_bank=issuing_bank,
        bank_account_number=bank_account_number,
        contact_address=contact_address,
        contact_phone_num=contact_phone_num,
    )


def update_org_type(
    executor: edgedb.Executor,
    *,
    id: uuid.UUID | None,
    current_code: str | None,
    name: str | None,
    code: str | None,
    description: str | None,
    is_deleted: bool | None,
) -> CreateOrgTypeResult | None:
    return executor.query_single(
        """\
        WITH
            id := <optional uuid>$id,
            current_code := <optional str>$current_code,
            name := <optional str>$name,
            code := <optional str>$code,
            description := <optional str>$description,
            is_deleted := <optional bool>$is_deleted,
            org_type := assert_single((
                SELECT OrganizationType
                FILTER (.id = id) ?? (.code = code)
            ))
        SELECT (
            UPDATE org_type
            SET {
                name := name ?? .name,
                code := code ?? .code,
                description := description ?? .description,
                deleted_at := (
                    .deleted_at IF NOT EXISTS is_deleted ELSE
                    datetime_of_transaction()
                    IF is_deleted AND NOT .is_protected ELSE {}
                )
            }
        ) { name, code, description, is_deleted, is_protected };\
        """,
        id=id,
        current_code=current_code,
        name=name,
        code=code,
        description=description,
        is_deleted=is_deleted,
    )


def update_org_type_status(
    executor: edgedb.Executor,
    *,
    is_deleted: bool,
    ids: list[uuid.UUID],
) -> list[UpdateOrgTypeStatusResult]:
    return executor.query(
        """\
        WITH
            is_deleted := <bool>$is_deleted
        SELECT (
            UPDATE OrganizationType
            FILTER .id in array_unpack(<array<uuid>>$ids) AND NOT .is_protected
            SET {
                deleted_at := datetime_of_transaction() IF is_deleted ELSE {}
            }
        ) { name, code, is_deleted };\
        """,
        is_deleted=is_deleted,
        ids=ids,
    )


def update_permission(
    executor: edgedb.Executor,
    *,
    id: uuid.UUID | None,
    current_code: str | None,
    is_deleted: bool | None,
    tags: list[str] | None,
    name: str,
    code: str,
    description: str | None,
) -> CreatePermissionResult | None:
    return executor.query_single(
        """\
        with
            id := <optional uuid>$id,
            current_code := <optional str>$current_code,
            is_deleted := <optional bool>$is_deleted,
            permission := assert_single((
                select Permission
                filter
                    (.id = id) ??
                    (.code_upper ?= str_upper(current_code)) ??
                    false
            )),
            tags := <optional array<str>>$tags
        select (
            update permission
            set {
                name := <str>$name,
                code := <str>$code,
                description := <optional str>$description,
                tags :=  (
                    for item in array_unpack(tags) union (
                        insert Tag {
                            name := item,
                            tag_type := TagType.Permission
                        } unless conflict on .name
                        else (
                            select Tag filter .name = item and .tag_type = TagType.Permission
                        )
                    )
                ),
                deleted_at := (
                    .deleted_at IF NOT EXISTS is_deleted ELSE
                    datetime_of_transaction() IF is_deleted ELSE {}
                )
            }
        ) {
            name,
            code,
            description,
            roles: { name },
            application: { name },
            tags: { name },
            is_deleted,
            created_at
        };\
        """,
        id=id,
        current_code=current_code,
        is_deleted=is_deleted,
        tags=tags,
        name=name,
        code=code,
        description=description,
    )


def update_permission_status(
    executor: edgedb.Executor,
    *,
    ids: list[uuid.UUID],
    is_deleted: bool,
) -> list[UpdatePermissionStatusResult]:
    return executor.query(
        """\
        with
            ids := <array<uuid>>$ids,
            is_deleted := <bool>$is_deleted
        select (
            update Permission filter .id in array_unpack(ids)
            set {
                deleted_at := datetime_of_transaction() if is_deleted else {}
            }
        ) { name, code, is_deleted };\
        """,
        ids=ids,
        is_deleted=is_deleted,
    )


def update_role(
    executor: edgedb.Executor,
    *,
    id: uuid.UUID | None,
    current_code: str | None,
    is_deleted: bool | None,
    name: str,
    code: str | None,
    description: str | None,
) -> CreateRoleResult | None:
    return executor.query_single(
        """\
        WITH
            id := <optional uuid>$id,
            current_code := <optional str>$current_code,
            is_deleted := <optional bool>$is_deleted,
            role := assert_single((
                SELECT Role
                FILTER
                    (.id = id) ??
                    (.code_upper ?= str_upper(current_code)) ??
                    false
            ))
        SELECT (
            UPDATE role
            SET {
                name := <str>$name,
                code := <optional str>$code,
                description := <optional str>$description,
                deleted_at := (
                    .deleted_at IF NOT EXISTS is_deleted ELSE
                    datetime_of_transaction() IF is_deleted ELSE {}
                )
            }
        ) {
            name,
            code,
            description,
            org_type: {
                code,
                name,
            },
            is_deleted,
            created_at
        };\
        """,
        id=id,
        current_code=current_code,
        is_deleted=is_deleted,
        name=name,
        code=code,
        description=description,
    )


def update_role_status(
    executor: edgedb.Executor,
    *,
    ids: list[uuid.UUID],
    is_deleted: bool,
) -> list[UpdateRoleStatusResult]:
    return executor.query(
        """\
        SELECT (
            UPDATE Role
            FILTER .id in array_unpack(<array<uuid>>$ids)
            SET {
                deleted_at := (
                    datetime_of_transaction() IF <bool>$is_deleted ELSE {}
                )
            }
        ) { name, code, is_deleted };\
        """,
        ids=ids,
        is_deleted=is_deleted,
    )


def update_user(
    executor: edgedb.Executor,
    *,
    name: str,
    username: str,
    email: str | None,
    mobile: str | None,
    id: uuid.UUID,
) -> CreateUserResult | None:
    return executor.query_single(
        """\
        WITH
            name := <str>$name,
            username := <str>$username,
            email := <optional str>$email,
            mobile := <optional str>$mobile
        SELECT (
            UPDATE User FILTER .id = <uuid>$id
            SET {
                name := name,
                username := username,
                email := email,
                mobile := mobile
            }
        ) {
            name,
            username,
            email,
            mobile,
            org_type: { code, name },
            departments := (
                SELECT .directly_organizations { code, name }
            ),
            roles: { code, name },
            is_deleted,
            created_at,
            last_login_at
        };\
        """,
        name=name,
        username=username,
        email=email,
        mobile=mobile,
        id=id,
    )


def update_user_organization(
    executor: edgedb.Executor,
    *,
    id: uuid.UUID,
    org_type_id: uuid.UUID | None,
    organization_ids: list[uuid.UUID],
) -> CreateUserResult | None:
    return executor.query_single(
        """\
        with
            user := ( select User filter .id = <uuid>$id ),
            org_type_id := <optional uuid>$org_type_id,
            org_type := (
                user.org_type ?? (
                    select OrganizationType filter .id = org_type_id
                )
            )
        select (
            update user filter .id = <uuid>$id
            set {
                directly_organizations := (
                    select Organization
                    filter
                        ( Organization is not OrganizationType )
                        and (
                            false if not exists org_type else
                            (
                                .id in array_unpack(
                                    <array<uuid>>$organization_ids
                                )
                                and org_type in .ancestors
                            )
                        )
                ),
                org_type := org_type
            }
        ) {
            name,
            username,
            email,
            mobile,
            org_type: { code, name },
            departments := (
                select .directly_organizations { code, name }
            ),
            roles: { code, name },
            is_deleted,
            created_at,
            last_login_at
        };\
        """,
        id=id,
        org_type_id=org_type_id,
        organization_ids=organization_ids,
    )


def update_user_roles(
    executor: edgedb.Executor,
    *,
    id: uuid.UUID,
    role_ids: list[uuid.UUID] | None,
) -> CreateUserResult | None:
    return executor.query_single(
        """\
        WITH
            user_id := <uuid>$id,
            role_ids := <optional array<uuid>>$role_ids
        SELECT (
            UPDATE User FILTER .id = user_id
            SET {
                roles := (
                    SELECT Role
                    FILTER
                        .id IN array_unpack(role_ids) AND
                        (
                            NOT EXISTS .org_type OR
                            .org_type ?= User.org_type
                        )
                )
            }
        ) {
            name,
            username,
            email,
            mobile,
            org_type: { code, name },
            departments := (
                SELECT .directly_organizations { code, name }
            ),
            roles: { code, name },
            is_deleted,
            created_at,
            last_login_at
        };\
        """,
        id=id,
        role_ids=role_ids,
    )


def update_user_status(
    executor: edgedb.Executor,
    *,
    user_ids: list[uuid.UUID],
    is_deleted: bool,
) -> list[UpdateUserStatusResult]:
    return executor.query(
        """\
        WITH
            user_ids := <array<uuid>>$user_ids,
            is_deleted := <bool>$is_deleted
        SELECT (
            UPDATE User FILTER .id in array_unpack(user_ids)
            SET {
                deleted_at := datetime_of_transaction() if is_deleted else {}
            }
        ) {
            name,
            is_deleted
        } ORDER BY .created_at DESC;\
        """,
        user_ids=user_ids,
        is_deleted=is_deleted,
    )
