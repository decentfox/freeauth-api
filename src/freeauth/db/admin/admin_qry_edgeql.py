# AUTOGENERATED FROM:
#     'src/freeauth/db/admin/queries/perms/add_missing_permissions.edgeql'
#     'src/freeauth/db/admin/queries/apps/create_application.edgeql'
#     'src/freeauth/db/admin/queries/orgs/create_department.edgeql'
#     'src/freeauth/db/admin/queries/orgs/create_enterprise.edgeql'
#     'src/freeauth/db/admin/queries/orgs/create_org_type.edgeql'
#     'src/freeauth/db/admin/queries/perms/create_permission.edgeql'
#     'src/freeauth/db/admin/queries/perms/create_permission_tag.edgeql'
#     'src/freeauth/db/admin/queries/roles/create_role.edgeql'
#     'src/freeauth/db/admin/queries/users/create_user.edgeql'
#     'src/freeauth/db/admin/queries/apps/delete_application.edgeql'
#     'src/freeauth/db/admin/queries/orgs/delete_org_type.edgeql'
#     'src/freeauth/db/admin/queries/orgs/delete_organization.edgeql'
#     'src/freeauth/db/admin/queries/perms/delete_permission.edgeql'
#     'src/freeauth/db/admin/queries/perms/delete_permission_tag.edgeql'
#     'src/freeauth/db/admin/queries/roles/delete_role.edgeql'
#     'src/freeauth/db/admin/queries/users/delete_user.edgeql'
#     'src/freeauth/db/admin/queries/apps/get_application_by_id.edgeql'
#     'src/freeauth/db/admin/queries/orgs/get_department_by_id_or_code.edgeql'
#     'src/freeauth/db/admin/queries/orgs/get_enterprise_by_id_or_code.edgeql'
#     'src/freeauth/db/admin/queries/orgs/get_org_type_by_id_or_code.edgeql'
#     'src/freeauth/db/admin/queries/orgs/get_organization_node.edgeql'
#     'src/freeauth/db/admin/queries/perms/get_permission_by_id_or_code.edgeql'
#     'src/freeauth/db/admin/queries/roles/get_role_by_id_or_code.edgeql'
#     'src/freeauth/db/admin/queries/users/get_user_by_id.edgeql'
#     'src/freeauth/db/admin/queries/orgs/organization_bind_users.edgeql'
#     'src/freeauth/db/admin/queries/orgs/organization_unbind_users.edgeql'
#     'src/freeauth/db/admin/queries/perms/perm_bind_roles.edgeql'
#     'src/freeauth/db/admin/queries/perms/perm_unbind_roles.edgeql'
#     'src/freeauth/db/admin/queries/apps/query_application_options.edgeql'
#     'src/freeauth/db/admin/queries/orgs/query_org_types.edgeql'
#     'src/freeauth/db/admin/queries/perms/query_permission_tags.edgeql'
#     'src/freeauth/db/admin/queries/perms/query_permissions.edgeql'
#     'src/freeauth/db/admin/queries/perms/reorder_permission_tags.edgeql'
#     'src/freeauth/db/admin/queries/users/resign_user.edgeql'
#     'src/freeauth/db/admin/queries/roles/role_bind_users.edgeql'
#     'src/freeauth/db/admin/queries/roles/role_unbind_users.edgeql'
#     'src/freeauth/db/admin/queries/apps/update_application.edgeql'
#     'src/freeauth/db/admin/queries/apps/update_application_secret.edgeql'
#     'src/freeauth/db/admin/queries/apps/update_application_status.edgeql'
#     'src/freeauth/db/admin/queries/orgs/update_department.edgeql'
#     'src/freeauth/db/admin/queries/orgs/update_enterprise.edgeql'
#     'src/freeauth/db/admin/queries/orgs/update_org_type.edgeql'
#     'src/freeauth/db/admin/queries/orgs/update_org_type_status.edgeql'
#     'src/freeauth/db/admin/queries/perms/update_permission.edgeql'
#     'src/freeauth/db/admin/queries/perms/update_permission_status.edgeql'
#     'src/freeauth/db/admin/queries/perms/update_permission_tag.edgeql'
#     'src/freeauth/db/admin/queries/roles/update_role.edgeql'
#     'src/freeauth/db/admin/queries/roles/update_role_status.edgeql'
#     'src/freeauth/db/admin/queries/users/update_user.edgeql'
#     'src/freeauth/db/admin/queries/users/update_user_organization.edgeql'
#     'src/freeauth/db/admin/queries/users/update_user_password.edgeql'
#     'src/freeauth/db/admin/queries/users/update_user_roles.edgeql'
#     'src/freeauth/db/admin/queries/users/update_user_status.edgeql'
# WITH:
#     $ edgedb-py -I FreeAuth --target blocking --dir src/freeauth/db/admin --file src/freeauth/db/admin/admin_qry_edgeql.py


from __future__ import annotations
import dataclasses
import datetime
import edgedb
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_validators__(cls):
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class AddMissingPermissionsResult(NoPydanticValidation):
    id: uuid.UUID


@dataclasses.dataclass
class CreateApplicationResult(NoPydanticValidation):
    id: uuid.UUID
    name: str
    description: str | None
    is_deleted: bool
    created_at: datetime.datetime


@dataclasses.dataclass
class CreateDepartmentResult(NoPydanticValidation):
    id: uuid.UUID
    name: str
    code: str | None
    description: str | None
    parent: CreateDepartmentResultParent
    enterprise: CreateDepartmentResultEnterprise


@dataclasses.dataclass
class CreateDepartmentResultEnterprise(NoPydanticValidation):
    id: uuid.UUID
    name: str
    code: str | None


@dataclasses.dataclass
class CreateDepartmentResultParent(NoPydanticValidation):
    id: uuid.UUID
    name: str
    code: str | None


@dataclasses.dataclass
class CreateEnterpriseResult(NoPydanticValidation):
    id: uuid.UUID
    name: str
    code: str | None
    tax_id: str | None
    issuing_bank: str | None
    bank_account_number: str | None
    contact_address: str | None
    contact_phone_num: str | None


@dataclasses.dataclass
class CreateOrgTypeResult(NoPydanticValidation):
    id: uuid.UUID
    name: str
    code: str | None
    description: str | None
    is_deleted: bool
    is_protected: bool


@dataclasses.dataclass
class CreatePermissionResult(NoPydanticValidation):
    id: uuid.UUID
    name: str
    code: str
    description: str | None
    roles: list[CreatePermissionResultRolesItem]
    application: CreatePermissionResultApplication
    tags: list[CreatePermissionResultTagsItem]
    is_deleted: bool
    created_at: datetime.datetime


@dataclasses.dataclass
class CreatePermissionResultApplication(NoPydanticValidation):
    id: uuid.UUID
    name: str


@dataclasses.dataclass
class CreatePermissionResultRolesItem(NoPydanticValidation):
    id: uuid.UUID
    name: str


@dataclasses.dataclass
class CreatePermissionResultTagsItem(NoPydanticValidation):
    id: uuid.UUID
    name: str


@dataclasses.dataclass
class CreatePermissionTagResult(NoPydanticValidation):
    id: uuid.UUID
    name: str
    rank: int | None
    created_at: datetime.datetime


@dataclasses.dataclass
class CreateRoleResult(NoPydanticValidation):
    id: uuid.UUID
    name: str
    code: str | None
    description: str | None
    org_type: CreateRoleResultOrgType | None
    is_deleted: bool
    is_protected: bool
    created_at: datetime.datetime


@dataclasses.dataclass
class CreateRoleResultOrgType(NoPydanticValidation):
    id: uuid.UUID
    code: str | None
    name: str


@dataclasses.dataclass
class CreateUserResult(NoPydanticValidation):
    id: uuid.UUID
    name: str | None
    username: str | None
    email: str | None
    mobile: str | None
    org_type: CreateRoleResultOrgType | None
    departments: list[CreateUserResultDepartmentsItem]
    roles: list[CreateUserResultRolesItem]
    is_deleted: bool
    created_at: datetime.datetime
    last_login_at: datetime.datetime | None


@dataclasses.dataclass
class CreateUserResultDepartmentsItem(NoPydanticValidation):
    id: uuid.UUID
    code: str | None
    name: str


@dataclasses.dataclass
class CreateUserResultRolesItem(NoPydanticValidation):
    id: uuid.UUID
    code: str | None
    name: str


@dataclasses.dataclass
class DeleteApplicationResult(NoPydanticValidation):
    id: uuid.UUID


@dataclasses.dataclass
class DeleteOrgTypeResult(NoPydanticValidation):
    id: uuid.UUID
    name: str
    code: str | None


@dataclasses.dataclass
class DeleteOrganizationResult(NoPydanticValidation):
    id: uuid.UUID


@dataclasses.dataclass
class DeletePermissionTagResult(NoPydanticValidation):
    id: uuid.UUID


@dataclasses.dataclass
class DeleteRoleResult(NoPydanticValidation):
    id: uuid.UUID


@dataclasses.dataclass
class DeleteUserResult(NoPydanticValidation):
    id: uuid.UUID
    users: list[DeleteUserResultUsersItem]
    protected_admin_users: list[DeleteUserResultUsersItem]
    protected_admin_roles: list[CreatePermissionResultRolesItem]


@dataclasses.dataclass
class DeleteUserResultUsersItem(NoPydanticValidation):
    id: uuid.UUID
    name: str | None


@dataclasses.dataclass
class GetApplicationByIdResult(NoPydanticValidation):
    id: uuid.UUID
    name: str
    description: str | None
    is_deleted: bool
    is_protected: bool
    created_at: datetime.datetime


@dataclasses.dataclass
class GetOrganizationNodeResult(NoPydanticValidation):
    id: uuid.UUID
    name: str
    code: str | None
    description: str | None
    parent_id: uuid.UUID | None
    is_enterprise: bool
    has_children: bool


@dataclasses.dataclass
class GetPermissionByIdOrCodeResult(NoPydanticValidation):
    id: uuid.UUID
    name: str
    code: str
    description: str | None
    roles: list[GetPermissionByIdOrCodeResultRolesItem]
    application: GetPermissionByIdOrCodeResultApplication
    tags: list[GetPermissionByIdOrCodeResultTagsItem]
    is_deleted: bool
    created_at: datetime.datetime


@dataclasses.dataclass
class GetPermissionByIdOrCodeResultApplication(NoPydanticValidation):
    id: uuid.UUID
    name: str


@dataclasses.dataclass
class GetPermissionByIdOrCodeResultRolesItem(NoPydanticValidation):
    id: uuid.UUID
    name: str
    code: str | None
    description: str | None
    is_deleted: bool
    created_at: datetime.datetime


@dataclasses.dataclass
class GetPermissionByIdOrCodeResultTagsItem(NoPydanticValidation):
    id: uuid.UUID
    name: str


@dataclasses.dataclass
class GetUserByIdResult(NoPydanticValidation):
    id: uuid.UUID
    name: str | None
    username: str | None
    email: str | None
    mobile: str | None
    org_type: CreateRoleResultOrgType | None
    departments: list[GetUserByIdResultDepartmentsItem]
    roles: list[CreateRoleResult]
    is_deleted: bool
    created_at: datetime.datetime
    last_login_at: datetime.datetime | None


@dataclasses.dataclass
class GetUserByIdResultDepartmentsItem(NoPydanticValidation):
    id: uuid.UUID
    code: str | None
    name: str
    enterprise: GetUserByIdResultDepartmentsItemEnterprise | None
    org_type: GetUserByIdResultDepartmentsItemEnterprise | None


@dataclasses.dataclass
class GetUserByIdResultDepartmentsItemEnterprise(NoPydanticValidation):
    id: uuid.UUID
    name: str


@dataclasses.dataclass
class QueryApplicationOptionsResult(NoPydanticValidation):
    id: uuid.UUID
    name: str
    description: str | None
    is_deleted: bool
    is_protected: bool


@dataclasses.dataclass
class QueryPermissionsResult(NoPydanticValidation):
    id: uuid.UUID
    total: int
    per_page: int
    page: int
    last: float
    rows: list[QueryPermissionsResultRowsItem]


@dataclasses.dataclass
class QueryPermissionsResultRowsItem(NoPydanticValidation):
    id: uuid.UUID
    name: str
    code: str
    description: str | None
    roles: list[QueryPermissionsResultRowsItemRolesItem]
    application: CreatePermissionResultApplication
    tags: list[CreatePermissionResultTagsItem]
    is_deleted: bool


@dataclasses.dataclass
class QueryPermissionsResultRowsItemRolesItem(NoPydanticValidation):
    id: uuid.UUID
    code: str | None
    name: str


@dataclasses.dataclass
class RoleUnbindUsersResult(NoPydanticValidation):
    id: uuid.UUID
    unbind_users: list[CreateUserResult]
    protected_admin_roles: list[CreateRoleResult]


@dataclasses.dataclass
class UpdateApplicationStatusResult(NoPydanticValidation):
    id: uuid.UUID
    name: str
    is_deleted: bool


@dataclasses.dataclass
class UpdateOrgTypeStatusResult(NoPydanticValidation):
    id: uuid.UUID
    name: str
    code: str | None
    is_deleted: bool


@dataclasses.dataclass
class UpdatePermissionStatusResult(NoPydanticValidation):
    id: uuid.UUID
    name: str
    code: str
    is_deleted: bool


@dataclasses.dataclass
class UpdateRoleStatusResult(NoPydanticValidation):
    id: uuid.UUID
    name: str
    code: str | None
    is_deleted: bool


@dataclasses.dataclass
class UpdateUserPasswordResult(NoPydanticValidation):
    id: uuid.UUID
    username: str | None
    email: str | None


@dataclasses.dataclass
class UpdateUserRolesResult(NoPydanticValidation):
    id: uuid.UUID
    user: CreateUserResult | None
    protected_admin_roles: list[CreateRoleResult]


@dataclasses.dataclass
class UpdateUserStatusResult(NoPydanticValidation):
    id: uuid.UUID
    users: list[UpdateUserStatusResultUsersItem]
    protected_admin_users: list[UpdateUserStatusResultUsersItem]
    protected_admin_roles: list[CreatePermissionResultRolesItem]


@dataclasses.dataclass
class UpdateUserStatusResultUsersItem(NoPydanticValidation):
    id: uuid.UUID
    name: str | None
    is_deleted: bool


def add_missing_permissions(
    executor: edgedb.Executor,
    *,
    perm_codes: list[str],
) -> list[AddMissingPermissionsResult]:
    return executor.query(
        """\
        with
            module freeauth
        for code in array_unpack(<array<str>>$perm_codes)
        union (
            insert Permission {
                name := code,
                code := code,
                application := global current_app
            } unless conflict
        );\
        """,
        perm_codes=perm_codes,
    )


def create_application(
    executor: edgedb.Executor,
    *,
    name: str,
    description: str | None = None,
    hashed_secret: str,
) -> CreateApplicationResult:
    return executor.query_single(
        """\
        with
            module freeauth,
            app := (
                insert Application {
                    name := <str>$name,
                    description := <optional str>$description,
                    hashed_secret := <str>$hashed_secret
                }
            ),
            wildcard_perm := (
                insert Permission {
                    name := '通配符权限',
                    code := '*',
                    description := '通配符权限授予应用的所有访问权限',
                    application := app
                }
            )
        select app {
            name,
            description,
            is_deleted,
            created_at
        }\
        """,
        name=name,
        description=description,
        hashed_secret=hashed_secret,
    )


def create_department(
    executor: edgedb.Executor,
    *,
    parent_id: uuid.UUID,
    name: str,
    code: str | None = None,
    description: str | None = None,
) -> CreateDepartmentResult | None:
    return executor.query_single(
        """\
        with
            module freeauth,
            parent := (
                select Organization filter .id = <uuid>$parent_id
            ),
            enterprise := assert_single((
                select Enterprise filter (
                    .id = (
                        # https://github.com/edgedb/edgedb/issues/5474
                        # parent[is Enterprise].id ??
                        parent[is Enterprise].id if exists parent[is Enterprise] else
                        parent[is Department].enterprise.id
                    )
                )
            ))
        for _ in (
            select true filter exists parent
        ) union (
            select (
                insert Department {
                    name := <str>$name,
                    code := <optional str>$code,
                    description := <optional str>$description,
                    enterprise := enterprise,
                    parent := parent,
                    ancestors := distinct (parent union parent.ancestors)
                }
            ) {
                name,
                code,
                description,
                parent: {
                    name,
                    code
                },
                enterprise: {
                    name,
                    code,
                }
            }
        );\
        """,
        parent_id=parent_id,
        name=name,
        code=code,
        description=description,
    )


def create_enterprise(
    executor: edgedb.Executor,
    *,
    org_type_id: uuid.UUID,
    name: str,
    code: str | None = None,
    tax_id: str | None = None,
    issuing_bank: str | None = None,
    bank_account_number: str | None = None,
    contact_address: str | None = None,
    contact_phone_num: str | None = None,
) -> CreateEnterpriseResult | None:
    return executor.query_single(
        """\
        with
            module freeauth,
            org_type := (
                select OrganizationType filter .id = <uuid>$org_type_id
            )
        for _ in (
            select true filter exists org_type
        ) union (
            select (
                insert Enterprise {
                    name := <str>$name,
                    code := <optional str>$code,
                    tax_id := <optional str>$tax_id,
                    issuing_bank := <optional str>$issuing_bank,
                    bank_account_number := <optional str>$bank_account_number,
                    contact_address := <optional str>$contact_address,
                    contact_phone_num := <optional str>$contact_phone_num,
                    org_type := org_type,
                    ancestors := ( select org_type )
                }
            ) {
                name,
                code,
                tax_id,
                issuing_bank,
                bank_account_number,
                contact_address,
                contact_phone_num
            }
        );\
        """,
        org_type_id=org_type_id,
        name=name,
        code=code,
        tax_id=tax_id,
        issuing_bank=issuing_bank,
        bank_account_number=bank_account_number,
        contact_address=contact_address,
        contact_phone_num=contact_phone_num,
    )


def create_org_type(
    executor: edgedb.Executor,
    *,
    name: str,
    code: str,
    description: str | None = None,
) -> CreateOrgTypeResult:
    return executor.query_single(
        """\
        with
            name := <str>$name,
            code := <str>$code,
            description := <optional str>$description
        select (
            insert freeauth::OrganizationType {
                name := name,
                code := code,
                description := description
            }
        ) { name, code, description, is_deleted, is_protected };\
        """,
        name=name,
        code=code,
        description=description,
    )


def create_permission(
    executor: edgedb.Executor,
    *,
    name: str,
    code: str,
    description: str | None = None,
    application_id: uuid.UUID,
    tags: list[str] | None = None,
) -> CreatePermissionResult:
    return executor.query_single(
        """\
        with
            module freeauth,
            name := <str>$name,
            code := <str>$code,
            description := <optional str>$description,
            application_id := <uuid>$application_id,
            tags := <optional array<str>>$tags
        select (
            insert Permission {
                name := name,
                code := code,
                description := description,
                application := (
                    select Application filter (
                        .id = application_id
                    )
                ),
                tags :=  (
                    for item in array_unpack(tags) union (
                        insert PermissionTag {
                            name := item,
                        } unless conflict on .name
                        else (
                            select PermissionTag filter .name = item
                        )
                    )
                )
            }
        ) {
            name,
            code,
            description,
            roles: { name },
            application: { name },
            tags: { name },
            is_deleted,
            created_at
        }\
        """,
        name=name,
        code=code,
        description=description,
        application_id=application_id,
        tags=tags,
    )


def create_permission_tag(
    executor: edgedb.Executor,
    *,
    name: str,
) -> CreatePermissionTagResult:
    return executor.query_single(
        """\
        with
            name := <str>$name,
        select (
            insert freeauth::PermissionTag {
                name := name,
            }
        ) {
            name,
            rank,
            created_at
        }\
        """,
        name=name,
    )


def create_role(
    executor: edgedb.Executor,
    *,
    name: str,
    code: str | None = None,
    description: str | None = None,
    org_type_id: uuid.UUID | None = None,
) -> CreateRoleResult:
    return executor.query_single(
        """\
        with
            module freeauth
        select (
            insert Role {
                name := <str>$name,
                code := <optional str>$code,
                description := <optional str>$description,
                org_type := (
                    select OrganizationType
                    filter .id = <optional uuid>$org_type_id
                )
            }
        ) {
            name,
            code,
            description,
            org_type: {
                code,
                name,
            },
            is_deleted,
            is_protected,
            created_at
        };\
        """,
        name=name,
        code=code,
        description=description,
        org_type_id=org_type_id,
    )


def create_user(
    executor: edgedb.Executor,
    *,
    name: str | None = None,
    username: str | None = None,
    email: str | None = None,
    mobile: str | None = None,
    hashed_password: str | None = None,
    reset_pwd_on_first_login: bool,
    organization_ids: list[uuid.UUID] | None = None,
    org_type_id: uuid.UUID | None = None,
) -> CreateUserResult:
    return executor.query_single(
        """\
        with
            module freeauth,
            name := <optional str>$name,
            username := <optional str>$username,
            email := <optional str>$email,
            mobile := <optional str>$mobile,
            hashed_password := <optional str>$hashed_password,
            reset_pwd_on_first_login := <bool>$reset_pwd_on_first_login,
            organization_ids := <optional array<uuid>>$organization_ids,
            org_type := (
                select OrganizationType filter (
                    .id = <optional uuid>$org_type_id
                )
            ),
            organizations := (
                select Organization
                filter
                    ( Organization is not OrganizationType ) and
                    (
                        false if not exists org_type else
                        (
                            .id in array_unpack(organization_ids) and
                            org_type in .ancestors
                        )
                    )
            )
        select (
            insert User {
                name := name,
                username := username,
                email := email,
                mobile := mobile,
                hashed_password := hashed_password,
                org_type := org_type,
                directly_organizations := organizations,
                reset_pwd_on_next_login := reset_pwd_on_first_login
            }
        ) {
            name,
            username,
            email,
            mobile,
            org_type: { code, name },
            departments := (
                select .directly_organizations { code, name }
            ),
            roles: { code, name },
            is_deleted,
            created_at,
            last_login_at
        };\
        """,
        name=name,
        username=username,
        email=email,
        mobile=mobile,
        hashed_password=hashed_password,
        reset_pwd_on_first_login=reset_pwd_on_first_login,
        organization_ids=organization_ids,
        org_type_id=org_type_id,
    )


def delete_application(
    executor: edgedb.Executor,
    *,
    ids: list[uuid.UUID],
) -> list[DeleteApplicationResult]:
    return executor.query(
        """\
        delete freeauth::Application
        filter .id in array_unpack(<array<uuid>>$ids) and not .is_protected\
        """,
        ids=ids,
    )


def delete_org_type(
    executor: edgedb.Executor,
    *,
    ids: list[uuid.UUID],
) -> list[DeleteOrgTypeResult]:
    return executor.query(
        """\
        select (
            delete freeauth::OrganizationType
            filter .id in array_unpack(<array<uuid>>$ids) and not .is_protected
        ) { name, code };\
        """,
        ids=ids,
    )


def delete_organization(
    executor: edgedb.Executor,
    *,
    ids: list[uuid.UUID],
) -> list[DeleteOrganizationResult]:
    return executor.query(
        """\
        delete freeauth::Organization filter .id in array_unpack(<array<uuid>>$ids);\
        """,
        ids=ids,
    )


def delete_permission(
    executor: edgedb.Executor,
    *,
    ids: list[uuid.UUID],
) -> list[AddMissingPermissionsResult]:
    return executor.query(
        """\
        delete freeauth::Permission filter .id in array_unpack(<array<uuid>>$ids);\
        """,
        ids=ids,
    )


def delete_permission_tag(
    executor: edgedb.Executor,
    *,
    ids: list[uuid.UUID],
) -> list[DeletePermissionTagResult]:
    return executor.query(
        """\
        delete freeauth::PermissionTag filter .id in array_unpack(<array<uuid>>$ids);\
        """,
        ids=ids,
    )


def delete_role(
    executor: edgedb.Executor,
    *,
    ids: list[uuid.UUID],
) -> list[DeleteRoleResult]:
    return executor.query(
        """\
        delete freeauth::Role
        filter .id in array_unpack(<array<uuid>>$ids) and not .is_protected;\
        """,
        ids=ids,
    )


def delete_user(
    executor: edgedb.Executor,
    *,
    user_ids: list[uuid.UUID],
) -> DeleteUserResult:
    return executor.query_single(
        """\
        with
            module freeauth,
            user_ids := <array<uuid>>$user_ids,
            users := ( select User filter .id in array_unpack(user_ids) ),
            protected_admin_roles := (
                select Role
                filter .is_protected
                and not exists (
                    ( select .users filter not .is_deleted )
                    except users
                )
            ),
            protected_admin_users := (
                select users
                filter
                    exists protected_admin_roles
                    and users.roles in protected_admin_roles
            )
        select {
            users := (
                delete users except protected_admin_users
            ) { name },
            protected_admin_users := (
                select protected_admin_users { name }
            ),
            protected_admin_roles := (
                select protected_admin_roles { name }
            )
        };\
        """,
        user_ids=user_ids,
    )


def get_application_by_id(
    executor: edgedb.Executor,
    *,
    id: uuid.UUID,
) -> GetApplicationByIdResult | None:
    return executor.query_single(
        """\
        with
            id := <uuid>$id,
        select assert_single(
            (
                select freeauth::Application {
                    name,
                    description,
                    is_deleted,
                    is_protected,
                    created_at
                }
                filter .id = id
            )
        );\
        """,
        id=id,
    )


def get_department_by_id_or_code(
    executor: edgedb.Executor,
    *,
    id: uuid.UUID | None = None,
    code: str | None = None,
    enterprise_id: uuid.UUID | None = None,
) -> CreateDepartmentResult | None:
    return executor.query_single(
        """\
        with
            id := <optional uuid>$id,
            code := <optional str>$code,
            enterprise_id := <optional uuid>$enterprise_id
        select assert_single(
            (
                select freeauth::Department {
                    name,
                    code,
                    description,
                    parent: {
                        name,
                        code
                    },
                    enterprise: {
                        name,
                        code,
                    }
                }
                filter
                    (.id = id) ??
                    (.code ?= code and .enterprise.id = enterprise_id)
            )
        );\
        """,
        id=id,
        code=code,
        enterprise_id=enterprise_id,
    )


def get_enterprise_by_id_or_code(
    executor: edgedb.Executor,
    *,
    id: uuid.UUID | None = None,
    code: str | None = None,
    org_type_id: uuid.UUID | None = None,
    org_type_code: str | None = None,
) -> CreateEnterpriseResult | None:
    return executor.query_single(
        """\
        with
            id := <optional uuid>$id,
            code := <optional str>$code,
            org_type_id := <optional uuid>$org_type_id,
            org_type_code := <optional str>$org_type_code
        select assert_single(
            (
                select freeauth::Enterprise {
                    name,
                    code,
                    tax_id,
                    issuing_bank,
                    bank_account_number,
                    contact_address,
                    contact_phone_num
                }
                filter
                    (.id = id) ??
                    (.code ?= code and .org_type.id = org_type_id) ??
                    (.code ?= code and .org_type.code = org_type_code)
            )
        );\
        """,
        id=id,
        code=code,
        org_type_id=org_type_id,
        org_type_code=org_type_code,
    )


def get_org_type_by_id_or_code(
    executor: edgedb.Executor,
    *,
    id: uuid.UUID | None = None,
    code: str | None = None,
) -> CreateOrgTypeResult | None:
    return executor.query_single(
        """\
        with
            id := <optional uuid>$id,
            code := <optional str>$code
        select assert_single(
            (
                select freeauth::OrganizationType {
                    name,
                    code,
                    description,
                    is_deleted,
                    is_protected
                }
                filter (.id = id) ?? (.code = code)
            )
        );\
        """,
        id=id,
        code=code,
    )


def get_organization_node(
    executor: edgedb.Executor,
    *,
    org_type_id: uuid.UUID | None = None,
    org_type_code: str | None = None,
    parent_id: uuid.UUID | None = None,
) -> list[GetOrganizationNodeResult]:
    return executor.query(
        """\
        with
            module freeauth,
            ot_id := <optional uuid>$org_type_id,
            ot_code := <optional str>$org_type_code,
            parent_id := <optional uuid>$parent_id
        select
            Organization {
                name,
                code,
                [is Department].description,
                parent_id := [is Department].parent.id,
                is_enterprise := Organization is Enterprise,
                has_children := exists .directly_children
            }
        filter (
            [is Department].parent.id ?= parent_id if exists parent_id else
            [is Enterprise].org_type.id ?= ot_id if exists ot_id else
            ([is Enterprise].org_type.code = ot_code)
        )
        order by .created_at;\
        """,
        org_type_id=org_type_id,
        org_type_code=org_type_code,
        parent_id=parent_id,
    )


def get_permission_by_id_or_code(
    executor: edgedb.Executor,
    *,
    id: uuid.UUID | None = None,
    code: str | None = None,
) -> GetPermissionByIdOrCodeResult | None:
    return executor.query_single(
        """\
        with
            id := <optional uuid>$id,
            code := <optional str>$code
        select assert_single(
            (
                select freeauth::Permission {
                    name,
                    code,
                    description,
                    roles: {
                        id,
                        name,
                        code,
                        description,
                        is_deleted,
                        created_at
                    },
                    application: { id, name },
                    tags: { id, name },
                    is_deleted,
                    created_at
                }
                filter (.id = id) ?? (.code_upper = str_upper(code))
            )
        );\
        """,
        id=id,
        code=code,
    )


def get_role_by_id_or_code(
    executor: edgedb.Executor,
    *,
    id: uuid.UUID | None = None,
    code: str | None = None,
) -> CreateRoleResult | None:
    return executor.query_single(
        """\
        with
            id := <optional uuid>$id,
            code := <optional str>$code
        select assert_single(
            (
                select freeauth::Role {
                    name,
                    code,
                    description,
                    org_type: {
                        code,
                        name,
                    },
                    is_deleted,
                    is_protected,
                    created_at
                }
                filter (.id = id) ?? (.code_upper = str_upper(code))
            )
        );\
        """,
        id=id,
        code=code,
    )


def get_user_by_id(
    executor: edgedb.Executor,
    *,
    id: uuid.UUID,
) -> GetUserByIdResult | None:
    return executor.query_single(
        """\
        with
            module freeauth
        select
            User {
                name,
                username,
                email,
                mobile,
                org_type: { code, name },
                departments := (
                    select .directly_organizations {
                        id,
                        code,
                        name,
                        enterprise := assert_single(.ancestors {
                            id,
                            name
                        } filter exists [is Enterprise]),
                        org_type := assert_single(.ancestors {
                            id,
                            name
                        } filter exists [is OrganizationType])
                    }
                ),
                roles: {
                    name,
                    code,
                    description,
                    org_type: { code, name },
                    is_deleted,
                    is_protected,
                    created_at
                },
                is_deleted,
                created_at,
                last_login_at
            }
        filter .id = <uuid>$id;\
        """,
        id=id,
    )


def organization_bind_users(
    executor: edgedb.Executor,
    *,
    user_ids: list[uuid.UUID],
    organization_ids: list[uuid.UUID],
    org_type_id: uuid.UUID,
) -> list[CreateUserResult]:
    return executor.query(
        """\
        with
            module freeauth,
            user_ids := <array<uuid>>$user_ids,
            organization_ids := <array<uuid>>$organization_ids,
            org_type := (
                select OrganizationType filter (
                    .id = <uuid>$org_type_id
                )
            ),
            organizations := (
                select Organization
                filter
                    ( Organization is not OrganizationType ) and
                    (
                        false if not exists org_type else
                        (
                            .id in array_unpack(organization_ids) and
                            org_type in .ancestors
                        )
                    )
            )
        select (
            update User filter
                .id in array_unpack(user_ids) and
                (
                    not exists .org_type or
                    .org_type ?= org_type
                )
            set {
                org_type := org_type,
                directly_organizations += organizations
            }
        ) {
            name,
            username,
            email,
            mobile,
            org_type: { code, name },
            departments := (
                select .directly_organizations { code, name }
            ),
            roles: { code, name },
            is_deleted,
            created_at,
            last_login_at
        };\
        """,
        user_ids=user_ids,
        organization_ids=organization_ids,
        org_type_id=org_type_id,
    )


def organization_unbind_users(
    executor: edgedb.Executor,
    *,
    user_ids: list[uuid.UUID],
    organization_ids: list[uuid.UUID],
) -> list[CreateUserResult]:
    return executor.query(
        """\
        with
            module freeauth,
            user_ids := <array<uuid>>$user_ids,
            organization_ids := <array<uuid>>$organization_ids,
            organizations := (
                select Organization
                filter .id in array_unpack(organization_ids)
            )
        select (
            update User filter .id in array_unpack(user_ids)
            set {
                org_type := .org_type
                if array_agg(
                    User.directly_organizations) != array_agg(organizations)
                else {},
                directly_organizations -= organizations,
                roles -= .org_type.roles
                if array_agg(
                    User.directly_organizations) = array_agg(organizations)
                else {},
            }
        ) {
            name,
            username,
            email,
            mobile,
            org_type: { code, name },
            departments := (
                select .directly_organizations { code, name }
            ),
            roles: { code, name },
            is_deleted,
            created_at,
            last_login_at
        };\
        """,
        user_ids=user_ids,
        organization_ids=organization_ids,
    )


def perm_bind_roles(
    executor: edgedb.Executor,
    *,
    role_ids: list[uuid.UUID],
    permission_ids: list[uuid.UUID],
) -> list[CreateRoleResult]:
    return executor.query(
        """\
        with
            module freeauth,
            role_ids := <array<uuid>>$role_ids,
            permission_ids := <array<uuid>>$permission_ids
        select (
            update Role filter .id in array_unpack(role_ids)
            set {
                permissions += (
                    select Permission
                    filter .id in array_unpack(permission_ids)
                )
            }
        ) {
            name,
            code,
            description,
            org_type: {
                code,
                name,
            },
            is_deleted,
            is_protected,
            created_at
        };\
        """,
        role_ids=role_ids,
        permission_ids=permission_ids,
    )


def perm_unbind_roles(
    executor: edgedb.Executor,
    *,
    role_ids: list[uuid.UUID],
    permission_ids: list[uuid.UUID],
) -> list[CreateRoleResult]:
    return executor.query(
        """\
        with
            module freeauth,
            role_ids := <array<uuid>>$role_ids,
            permission_ids := <array<uuid>>$permission_ids
        select (
            update Role filter .id in array_unpack(role_ids)
            set {
                permissions -= (
                    select Permission
                    filter .id in array_unpack(permission_ids)
                )
            }
        ) {
            name,
            code,
            description,
            org_type: {
                code,
                name,
            },
            is_deleted,
            is_protected,
            created_at
        };\
        """,
        role_ids=role_ids,
        permission_ids=permission_ids,
    )


def query_application_options(
    executor: edgedb.Executor,
    *,
    q: str | None = None,
) -> list[QueryApplicationOptionsResult]:
    return executor.query(
        """\
        with
            q := <optional str>$q
        select freeauth::Application {
            id,
            name,
            description,
            is_deleted,
            is_protected
        } filter
            true if not exists q else
            .name ilike q or
            .description ?? '' ilike q
        order by .created_at desc;\
        """,
        q=q,
    )


def query_org_types(
    executor: edgedb.Executor,
) -> list[CreateOrgTypeResult]:
    return executor.query(
        """\
        select freeauth::OrganizationType {
            name, code, description, is_deleted, is_protected
        } order by
            .is_deleted then
            .is_protected desc then
            .code;\
        """,
    )


def query_permission_tags(
    executor: edgedb.Executor,
) -> list[GetPermissionByIdOrCodeResultTagsItem]:
    return executor.query(
        """\
        select freeauth::PermissionTag {
            id,
            name
        } order by .rank then .created_at\
        """,
    )


def query_permissions(
    executor: edgedb.Executor,
    *,
    page: int | None = None,
    per_page: int | None = None,
    q: str | None = None,
    application_id: uuid.UUID | None = None,
    tag_ids: list[uuid.UUID] | None = None,
    role_id: uuid.UUID | None = None,
) -> QueryPermissionsResult:
    return executor.query_single(
        """\
        with
            module freeauth,
            page := <optional int64>$page ?? 1,
            per_page := <optional int64>$per_page ?? 20,
            q := <optional str>$q,
            application_id := <optional uuid>$application_id,
            tag_ids := <optional array<uuid>>$tag_ids,
            role := (
                select Role
                filter .id = <optional uuid>$role_id
            ),
            permissions := (
                select Permission
                filter (
                    true if not exists q else
                    .name ?? '' ilike q or
                    .code ?? '' ilike q
                ) and (
                    true if not exists application_id else
                    .application.id = application_id
                ) and (
                    all((
                        for tag in array_unpack(tag_ids)
                        union (tag in .tags.id)
                    ))
                ) and (
                    true if not exists role else
                    role in .roles
                )
            ),
            total := count(permissions)
        select {
            total := total,
            per_page := per_page,
            page := page,
            last := math::ceil(total / per_page),
            rows := array_agg((
                select permissions {
                    id,
                    name,
                    code,
                    description,
                    roles: { id, code, name },
                    application: { name },
                    tags: { name },
                    is_deleted,
                }
                offset (page - 1) * per_page
                limit per_page
            ))
        };\
        """,
        page=page,
        per_page=per_page,
        q=q,
        application_id=application_id,
        tag_ids=tag_ids,
        role_id=role_id,
    )


def reorder_permission_tags(
    executor: edgedb.Executor,
    *,
    ids: list[uuid.UUID],
) -> list[CreatePermissionTagResult]:
    return executor.query(
        """\
        select (
            for tag in enumerate(array_unpack(<array<uuid>>$ids))
            union (
                update freeauth::PermissionTag filter .id = tag.1
                set {
                    rank := tag.0 + 1
                }
            )
        ) {
            name,
            rank,
            created_at
        }\
        """,
        ids=ids,
    )


def resign_user(
    executor: edgedb.Executor,
    *,
    user_ids: list[uuid.UUID],
    is_deleted: bool | None = None,
) -> DeleteUserResult:
    return executor.query_single(
        """\
        with
            module freeauth,
            user_ids := <array<uuid>>$user_ids,
            is_deleted := <optional bool>$is_deleted,
            users := ( select User filter .id in array_unpack(user_ids) ),
            protected_admin_roles := (
                select Role
                filter .is_protected
                and not exists (
                    ( select .users filter not .is_deleted )
                    except users
                )
            ),
            protected_admin_users := (
                select users
                filter
                    exists protected_admin_roles
                    and users.roles in protected_admin_roles
            )
        select {
            users := (
                update users except protected_admin_users
                set {
                    directly_organizations := {},
                    org_type := {},
                    roles := {},
                    deleted_at := (
                        datetime_of_transaction() if is_deleted else .deleted_at
                    )
                }
            ) { name },
            protected_admin_users := (
                select protected_admin_users { name }
            ),
            protected_admin_roles := (
                select protected_admin_roles { name }
            )
        };\
        """,
        user_ids=user_ids,
        is_deleted=is_deleted,
    )


def role_bind_users(
    executor: edgedb.Executor,
    *,
    user_ids: list[uuid.UUID],
    role_ids: list[uuid.UUID],
) -> list[CreateUserResult]:
    return executor.query(
        """\
        with
            module freeauth,
            user_ids := <array<uuid>>$user_ids,
            role_ids := <array<uuid>>$role_ids
        select (
            update User filter .id in array_unpack(user_ids)
            set {
                roles += (
                    select Role
                    filter
                        .id IN array_unpack(role_ids) and
                        (
                            not exists .org_type or
                            .org_type ?= User.org_type
                        )
                )
            }
        ) {
            name,
            username,
            email,
            mobile,
            org_type: { code, name },
            departments := (
                select .directly_organizations { code, name }
            ),
            roles: { code, name },
            is_deleted,
            created_at,
            last_login_at
        };\
        """,
        user_ids=user_ids,
        role_ids=role_ids,
    )


def role_unbind_users(
    executor: edgedb.Executor,
    *,
    user_ids: list[uuid.UUID],
    role_ids: list[uuid.UUID],
) -> RoleUnbindUsersResult:
    return executor.query_single(
        """\
        with
            module freeauth,
            user_ids := <array<uuid>>$user_ids,
            role_ids := <array<uuid>>$role_ids,
            users := ( select User filter .id in array_unpack(user_ids) ),
            protected_admin_roles := (
                select Role
                filter .id in array_unpack(role_ids)
                and .is_protected
                and not exists (
                    ( select .users filter not .is_deleted )
                    except users
                )
            )
        select {
            unbind_users := (
                update users
                set {
                    roles -= (
                        select Role
                        filter .id in array_unpack(role_ids)
                        and Role not in protected_admin_roles
                    )
                }
            ) {
                name,
                username,
                email,
                mobile,
                org_type: { code, name },
                departments := (
                    select .directly_organizations { code, name }
                ),
                roles: { code, name },
                is_deleted,
                created_at,
                last_login_at
            },
            protected_admin_roles := (
                select protected_admin_roles {
                    name,
                    code,
                    description,
                    org_type: {
                        code,
                        name,
                    },
                    is_deleted,
                    is_protected,
                    created_at
                }
            )
        };\
        """,
        user_ids=user_ids,
        role_ids=role_ids,
    )


def update_application(
    executor: edgedb.Executor,
    *,
    name: str,
    description: str | None = None,
    id: uuid.UUID,
) -> GetApplicationByIdResult | None:
    return executor.query_single(
        """\
        with
            name := <str>$name,
            description := <optional str>$description,
        select (
            update freeauth::Application filter .id = <uuid>$id
            set {
                name := name,
                description := description,
            }
        ) {
            name,
            description,
            is_deleted,
            is_protected,
            created_at
        };\
        """,
        name=name,
        description=description,
        id=id,
    )


def update_application_secret(
    executor: edgedb.Executor,
    *,
    id: uuid.UUID,
    hashed_secret: str,
) -> DeleteApplicationResult | None:
    return executor.query_single(
        """\
        update freeauth::Application filter .id = <uuid>$id set {
            hashed_secret := <str>$hashed_secret
        };\
        """,
        id=id,
        hashed_secret=hashed_secret,
    )


def update_application_status(
    executor: edgedb.Executor,
    *,
    is_deleted: bool,
    ids: list[uuid.UUID],
) -> list[UpdateApplicationStatusResult]:
    return executor.query(
        """\
        with
            is_deleted := <bool>$is_deleted
        select (
            update freeauth::Application
            filter .id in array_unpack(<array<uuid>>$ids) and not .is_protected
            set {
                deleted_at := datetime_of_transaction() if is_deleted else {}
            }
        ) { name, is_deleted };\
        """,
        is_deleted=is_deleted,
        ids=ids,
    )


def update_department(
    executor: edgedb.Executor,
    *,
    id: uuid.UUID | None = None,
    current_code: str | None = None,
    enterprise_id: uuid.UUID | None = None,
    parent_id: uuid.UUID,
    name: str,
    code: str | None = None,
    description: str | None = None,
) -> CreateDepartmentResult | None:
    return executor.query_single(
        """\
        with
            module freeauth,
            id := <optional uuid>$id,
            current_code := <optional str>$current_code,
            enterprise_id := <optional uuid>$enterprise_id,
            parent := (
                select Organization filter .id = <uuid>$parent_id
            ),
            parent_is_enterprise := exists parent[is Enterprise],
            enterprise := assert_single((
                select Enterprise filter .id = (
                    parent[is Enterprise].id if parent_is_enterprise else
                    parent[is Department].enterprise.id
                )
            )),
            department := assert_single((
                select Department
                filter
                    (.id = id) ??
                    (
                        .code ?= current_code and
                        .enterprise.id = enterprise_id
                    ) ??
                    false
            ))
        select (
            update department
            set {
                name := <str>$name,
                code := <optional str>$code,
                description := <optional str>$description,
                enterprise := enterprise,
                parent := parent,
                ancestors := (
                    select distinct (
                        select .parent union .parent.ancestors
                    )
                )
            }
        ) {
            name,
            code,
            description,
            parent: {
                name,
                code
            },
            enterprise: {
                name,
                code,
            }
        };\
        """,
        id=id,
        current_code=current_code,
        enterprise_id=enterprise_id,
        parent_id=parent_id,
        name=name,
        code=code,
        description=description,
    )


def update_enterprise(
    executor: edgedb.Executor,
    *,
    id: uuid.UUID | None = None,
    current_code: str | None = None,
    org_type_id: uuid.UUID | None = None,
    org_type_code: str | None = None,
    name: str,
    code: str | None = None,
    tax_id: str | None = None,
    issuing_bank: str | None = None,
    bank_account_number: str | None = None,
    contact_address: str | None = None,
    contact_phone_num: str | None = None,
) -> CreateEnterpriseResult | None:
    return executor.query_single(
        """\
        with
            module freeauth,
            id := <optional uuid>$id,
            current_code := <optional str>$current_code,
            org_type_id := <optional uuid>$org_type_id,
            org_type_code := <optional str>$org_type_code,
            enterprise := assert_single((
                select Enterprise
                filter
                    (.id = id) ??
                    (.code ?= current_code and .org_type.id = org_type_id) ??
                    (
                        .code ?= current_code and
                        .org_type.code = org_type_code
                    ) ??
                    false
            ))
        select (
            UPDATE enterprise
            set {
                name := <str>$name,
                code := <optional str>$code,
                tax_id := <optional str>$tax_id,
                issuing_bank := <optional str>$issuing_bank,
                bank_account_number := <optional str>$bank_account_number,
                contact_address := <optional str>$contact_address,
                contact_phone_num := <optional str>$contact_phone_num,
            }
        ) {
            name,
            code,
            tax_id,
            issuing_bank,
            bank_account_number,
            contact_address,
            contact_phone_num
        };\
        """,
        id=id,
        current_code=current_code,
        org_type_id=org_type_id,
        org_type_code=org_type_code,
        name=name,
        code=code,
        tax_id=tax_id,
        issuing_bank=issuing_bank,
        bank_account_number=bank_account_number,
        contact_address=contact_address,
        contact_phone_num=contact_phone_num,
    )


def update_org_type(
    executor: edgedb.Executor,
    *,
    id: uuid.UUID | None = None,
    current_code: str | None = None,
    name: str | None = None,
    code: str | None = None,
    description: str | None = None,
    is_deleted: bool | None = None,
) -> CreateOrgTypeResult | None:
    return executor.query_single(
        """\
        with
            module freeauth,
            id := <optional uuid>$id,
            current_code := <optional str>$current_code,
            name := <optional str>$name,
            code := <optional str>$code,
            description := <optional str>$description,
            is_deleted := <optional bool>$is_deleted,
            org_type := assert_single((
                select OrganizationType
                filter (.id = id) ?? (.code = code)
            ))
        select (
            update org_type
            set {
                name := name ?? .name,
                code := code ?? .code,
                description := description ?? .description,
                deleted_at := (
                    .deleted_at if not exists is_deleted else
                    datetime_of_transaction()
                    if is_deleted and not .is_protected else {}
                )
            }
        ) { name, code, description, is_deleted, is_protected };\
        """,
        id=id,
        current_code=current_code,
        name=name,
        code=code,
        description=description,
        is_deleted=is_deleted,
    )


def update_org_type_status(
    executor: edgedb.Executor,
    *,
    is_deleted: bool,
    ids: list[uuid.UUID],
) -> list[UpdateOrgTypeStatusResult]:
    return executor.query(
        """\
        with
            is_deleted := <bool>$is_deleted
        select (
            update freeauth::OrganizationType
            filter .id in array_unpack(<array<uuid>>$ids) and not .is_protected
            set {
                deleted_at := datetime_of_transaction() if is_deleted else {}
            }
        ) { name, code, is_deleted };\
        """,
        is_deleted=is_deleted,
        ids=ids,
    )


def update_permission(
    executor: edgedb.Executor,
    *,
    id: uuid.UUID | None = None,
    current_code: str | None = None,
    is_deleted: bool | None = None,
    tags: list[str] | None = None,
    name: str,
    code: str,
    description: str | None = None,
) -> CreatePermissionResult | None:
    return executor.query_single(
        """\
        with
            module freeauth,
            id := <optional uuid>$id,
            current_code := <optional str>$current_code,
            is_deleted := <optional bool>$is_deleted,
            permission := assert_single((
                select Permission
                filter
                    (.id = id) ??
                    (.code_upper ?= str_upper(current_code)) ??
                    false
            )),
            tags := <optional array<str>>$tags
        select (
            update permission
            set {
                name := <str>$name,
                code := <str>$code,
                description := <optional str>$description,
                tags :=  (
                    for item in array_unpack(tags) union (
                        insert PermissionTag {
                            name := item,
                        } unless conflict on .name
                        else (
                            select PermissionTag filter .name = item
                        )
                    )
                ),
                deleted_at := (
                    .deleted_at if not exists is_deleted else
                    datetime_of_transaction() if is_deleted else {}
                )
            }
        ) {
            name,
            code,
            description,
            roles: { name },
            application: { name },
            tags: { name },
            is_deleted,
            created_at
        };\
        """,
        id=id,
        current_code=current_code,
        is_deleted=is_deleted,
        tags=tags,
        name=name,
        code=code,
        description=description,
    )


def update_permission_status(
    executor: edgedb.Executor,
    *,
    ids: list[uuid.UUID],
    is_deleted: bool,
) -> list[UpdatePermissionStatusResult]:
    return executor.query(
        """\
        with
            ids := <array<uuid>>$ids,
            is_deleted := <bool>$is_deleted
        select (
            update freeauth::Permission filter .id in array_unpack(ids)
            set {
                deleted_at := datetime_of_transaction() if is_deleted else {}
            }
        ) { name, code, is_deleted };\
        """,
        ids=ids,
        is_deleted=is_deleted,
    )


def update_permission_tag(
    executor: edgedb.Executor,
    *,
    id: uuid.UUID,
    name: str,
) -> CreatePermissionTagResult | None:
    return executor.query_single(
        """\
        with
            id := <uuid>$id,
            name := <str>$name,
        select (
            update freeauth::PermissionTag filter .id = id
            set {
                name := name
            }
        ) {
            name,
            rank,
            created_at
        };\
        """,
        id=id,
        name=name,
    )


def update_role(
    executor: edgedb.Executor,
    *,
    id: uuid.UUID | None = None,
    current_code: str | None = None,
    is_deleted: bool | None = None,
    name: str,
    code: str | None = None,
    description: str | None = None,
) -> CreateRoleResult | None:
    return executor.query_single(
        """\
        with
            module freeauth,
            id := <optional uuid>$id,
            current_code := <optional str>$current_code,
            is_deleted := <optional bool>$is_deleted,
            role := assert_single((
                select Role
                filter
                    (.id = id) ??
                    (.code_upper ?= str_upper(current_code)) ??
                    false
            ))
        select (
            update role
            set {
                name := <str>$name,
                code := <optional str>$code,
                description := <optional str>$description,
                deleted_at := (
                    .deleted_at if not exists is_deleted else
                    datetime_of_transaction() if is_deleted else {}
                )
            }
        ) {
            name,
            code,
            description,
            org_type: {
                code,
                name,
            },
            is_deleted,
            is_protected,
            created_at
        };\
        """,
        id=id,
        current_code=current_code,
        is_deleted=is_deleted,
        name=name,
        code=code,
        description=description,
    )


def update_role_status(
    executor: edgedb.Executor,
    *,
    ids: list[uuid.UUID],
    is_deleted: bool,
) -> list[UpdateRoleStatusResult]:
    return executor.query(
        """\
        select (
            update freeauth::Role
            filter .id in array_unpack(<array<uuid>>$ids) and not .is_protected
            set {
                deleted_at := (
                    datetime_of_transaction() if <bool>$is_deleted else {}
                )
            }
        ) { name, code, is_deleted };\
        """,
        ids=ids,
        is_deleted=is_deleted,
    )


def update_user(
    executor: edgedb.Executor,
    *,
    name: str,
    username: str,
    email: str | None = None,
    mobile: str | None = None,
    id: uuid.UUID,
) -> CreateUserResult | None:
    return executor.query_single(
        """\
        with
            name := <str>$name,
            username := <str>$username,
            email := <optional str>$email,
            mobile := <optional str>$mobile
        select (
            update freeauth::User filter .id = <uuid>$id
            set {
                name := name,
                username := username,
                email := email,
                mobile := mobile
            }
        ) {
            name,
            username,
            email,
            mobile,
            org_type: { code, name },
            departments := (
                select .directly_organizations { code, name }
            ),
            roles: { code, name },
            is_deleted,
            created_at,
            last_login_at
        };\
        """,
        name=name,
        username=username,
        email=email,
        mobile=mobile,
        id=id,
    )


def update_user_organization(
    executor: edgedb.Executor,
    *,
    id: uuid.UUID,
    org_type_id: uuid.UUID | None = None,
    organization_ids: list[uuid.UUID],
) -> CreateUserResult | None:
    return executor.query_single(
        """\
        with
            module freeauth,
            user := ( select User filter .id = <uuid>$id ),
            org_type_id := <optional uuid>$org_type_id,
            org_type := (
                user.org_type ?? (
                    select OrganizationType filter .id = org_type_id
                )
            )
        select (
            update user filter .id = <uuid>$id
            set {
                directly_organizations := (
                    select Organization
                    filter
                        ( Organization is not OrganizationType )
                        and (
                            false if not exists org_type else
                            (
                                .id in array_unpack(
                                    <array<uuid>>$organization_ids
                                )
                                and org_type in .ancestors
                            )
                        )
                ),
                org_type := org_type
            }
        ) {
            name,
            username,
            email,
            mobile,
            org_type: { code, name },
            departments := (
                select .directly_organizations { code, name }
            ),
            roles: { code, name },
            is_deleted,
            created_at,
            last_login_at
        };\
        """,
        id=id,
        org_type_id=org_type_id,
        organization_ids=organization_ids,
    )


def update_user_password(
    executor: edgedb.Executor,
    *,
    id: uuid.UUID,
    hashed_password: str,
) -> UpdateUserPasswordResult | None:
    return executor.query_single(
        """\
        select (
            update freeauth::User filter .id = <uuid>$id set {
                hashed_password := <str>$hashed_password
            }
        ) {
            username,
            email
        }\
        """,
        id=id,
        hashed_password=hashed_password,
    )


def update_user_roles(
    executor: edgedb.Executor,
    *,
    id: uuid.UUID,
    role_ids: list[uuid.UUID] | None = None,
) -> UpdateUserRolesResult:
    return executor.query_single(
        """\
        with
            module freeauth,
            user_id := <uuid>$id,
            role_ids := <optional array<uuid>>$role_ids,
            user := ( select User filter .id = user_id ),
            roles := (
                select Role
                filter
                    .id in array_unpack(role_ids) and
                    (
                        not exists .org_type or
                        .org_type ?= user.org_type
                    )
            ),
            deleted_roles := user.roles except roles,
            protected_admin_roles := (
                select deleted_roles
                filter .is_protected
                and not exists (
                    ( select .users filter not .is_deleted )
                    except user
                )
            )
        select {
            user := (
                update user
                set {
                    roles := roles union protected_admin_roles
                }
            ) {
                name,
                username,
                email,
                mobile,
                org_type: { code, name },
                departments := (
                    select .directly_organizations { code, name }
                ),
                roles: { code, name },
                is_deleted,
                created_at,
                last_login_at
            },
            protected_admin_roles := (
                select protected_admin_roles {
                    name,
                    code,
                    description,
                    org_type: {
                        code,
                        name,
                    },
                    is_deleted,
                    is_protected,
                    created_at
                }
            )
        };\
        """,
        id=id,
        role_ids=role_ids,
    )


def update_user_status(
    executor: edgedb.Executor,
    *,
    user_ids: list[uuid.UUID],
    is_deleted: bool,
) -> UpdateUserStatusResult:
    return executor.query_single(
        """\
        with
            module freeauth,
            user_ids := <array<uuid>>$user_ids,
            is_deleted := <bool>$is_deleted,
            users := ( select User filter .id in array_unpack(user_ids) ),
            protected_admin_roles := (
                select Role
                filter .is_protected
                and not exists (
                    ( select .users filter not .is_deleted )
                    except users
                )
            ),
            protected_admin_users := (
                select users
                filter
                    exists protected_admin_roles
                    and users.roles in protected_admin_roles
            )
        select {
            users := (
                update users except protected_admin_users
                set {
                    deleted_at := datetime_of_transaction() if is_deleted else {}
                }
            ) {
                name,
                is_deleted
            },
            protected_admin_users := (
                select protected_admin_users {
                    name,
                    is_deleted
                }
            ),
            protected_admin_roles := (
                select protected_admin_roles { name }
            )
        };\
        """,
        user_ids=user_ids,
        is_deleted=is_deleted,
    )
