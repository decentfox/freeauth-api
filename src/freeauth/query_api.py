# AUTOGENERATED FROM:
#     'src/freeauth/audit_logs/queries/create_audit_log.edgeql'
#     'src/freeauth/organizations/queries/create_department.edgeql'
#     'src/freeauth/organizations/queries/create_enterprise.edgeql'
#     'src/freeauth/organizations/queries/create_org_type.edgeql'
#     'src/freeauth/roles/queries/create_role.edgeql'
#     'src/freeauth/users/queries/create_user.edgeql'
#     'src/freeauth/organizations/queries/delete_org_type.edgeql'
#     'src/freeauth/organizations/queries/delete_organization.edgeql'
#     'src/freeauth/roles/queries/delete_role.edgeql'
#     'src/freeauth/users/queries/delete_user.edgeql'
#     'src/freeauth/organizations/queries/get_department_by_id_or_code.edgeql'
#     'src/freeauth/organizations/queries/get_enterprise_by_id_or_code.edgeql'
#     'src/freeauth/settings/queries/get_login_setting.edgeql'
#     'src/freeauth/settings/queries/get_login_setting_by_key.edgeql'
#     'src/freeauth/organizations/queries/get_org_type_by_id_or_code.edgeql'
#     'src/freeauth/organizations/queries/get_organization_node.edgeql'
#     'src/freeauth/roles/queries/get_role_by_id_or_code.edgeql'
#     'src/freeauth/auth/queries/get_user_by_account.edgeql'
#     'src/freeauth/users/queries/get_user_by_id.edgeql'
#     'src/freeauth/organizations/queries/organization_add_member.edgeql'
#     'src/freeauth/organizations/queries/query_org_types.edgeql'
#     'src/freeauth/users/queries/resign_user.edgeql'
#     'src/freeauth/roles/queries/role_bind_users.edgeql'
#     'src/freeauth/roles/queries/role_unbind_users.edgeql'
#     'src/freeauth/auth/queries/send_code.edgeql'
#     'src/freeauth/auth/queries/sign_in.edgeql'
#     'src/freeauth/auth/queries/sign_up.edgeql'
#     'src/freeauth/organizations/queries/update_department.edgeql'
#     'src/freeauth/organizations/queries/update_enterprise.edgeql'
#     'src/freeauth/organizations/queries/update_org_type.edgeql'
#     'src/freeauth/organizations/queries/update_org_type_status.edgeql'
#     'src/freeauth/roles/queries/update_role.edgeql'
#     'src/freeauth/roles/queries/update_role_status.edgeql'
#     'src/freeauth/users/queries/update_user.edgeql'
#     'src/freeauth/users/queries/update_user_organization.edgeql'
#     'src/freeauth/users/queries/update_user_roles.edgeql'
#     'src/freeauth/users/queries/update_user_status.edgeql'
#     'src/freeauth/settings/queries/upsert_login_setting.edgeql'
#     'src/freeauth/auth/queries/validate_code.edgeql'
#     'src/freeauth/auth/queries/validate_pwd.edgeql'
# WITH:
#     $ edgedb-py --file src/freeauth/query_api.py


from __future__ import annotations

import dataclasses
import datetime
import enum
import typing
import uuid

import edgedb


class NoPydanticValidation:
    @classmethod
    def __get_validators__(cls):
        from pydantic.dataclasses import dataclass as pydantic_dataclass

        pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


class AuthAuditEventType(enum.Enum):
    SIGNIN = "SignIn"
    SIGNOUT = "SignOut"
    SIGNUP = "SignUp"


class AuthAuditStatusCode(enum.Enum):
    OK = "OK"
    ACCOUNT_ALREADY_EXISTS = "ACCOUNT_ALREADY_EXISTS"
    ACCOUNT_NOT_EXISTS = "ACCOUNT_NOT_EXISTS"
    ACCOUNT_DISABLED = "ACCOUNT_DISABLED"
    INVALID_PASSWORD = "INVALID_PASSWORD"
    PASSWORD_ATTEMPTS_EXCEEDED = "PASSWORD_ATTEMPTS_EXCEEDED"
    INVALID_CODE = "INVALID_CODE"
    CODE_INCORRECT = "CODE_INCORRECT"
    CODE_ATTEMPTS_EXCEEDED = "CODE_ATTEMPTS_EXCEEDED"
    CODE_EXPIRED = "CODE_EXPIRED"


class AuthCodeType(enum.Enum):
    SMS = "SMS"
    EMAIL = "Email"


class AuthVerifyType(enum.Enum):
    SIGNIN = "SignIn"
    SIGNUP = "SignUp"


@dataclasses.dataclass
class CreateAuditLogResult(NoPydanticValidation):
    id: uuid.UUID
    client_ip: str
    os: str | None
    device: str | None
    browser: str | None
    status_code: AuthAuditStatusCode
    is_succeed: bool
    event_type: AuthAuditEventType
    created_at: datetime.datetime
    user: CreateAuditLogResultUser


@dataclasses.dataclass
class CreateAuditLogResultUser(NoPydanticValidation):
    id: uuid.UUID
    username: str | None
    mobile: str | None
    email: str | None


@dataclasses.dataclass
class CreateDepartmentResult(NoPydanticValidation):
    id: uuid.UUID
    name: str
    code: str | None
    description: str | None
    parent: CreateDepartmentResultParent
    enterprise: CreateDepartmentResultEnterprise


@dataclasses.dataclass
class CreateDepartmentResultEnterprise(NoPydanticValidation):
    id: uuid.UUID
    name: str
    code: str | None


@dataclasses.dataclass
class CreateDepartmentResultParent(NoPydanticValidation):
    id: uuid.UUID
    name: str
    code: str | None


@dataclasses.dataclass
class CreateEnterpriseResult(NoPydanticValidation):
    id: uuid.UUID
    name: str
    code: str | None
    tax_id: str | None
    issuing_bank: str | None
    bank_account_number: str | None
    contact_address: str | None
    contact_phone_num: str | None


@dataclasses.dataclass
class CreateOrgTypeResult(NoPydanticValidation):
    id: uuid.UUID
    name: str
    code: str | None
    description: str | None
    is_deleted: bool
    is_protected: bool


@dataclasses.dataclass
class CreateRoleResult(NoPydanticValidation):
    id: uuid.UUID
    name: str
    code: str | None
    description: str | None
    org_type: CreateRoleResultOrgType | None
    is_deleted: bool
    created_at: datetime.datetime


@dataclasses.dataclass
class CreateRoleResultOrgType(NoPydanticValidation):
    id: uuid.UUID
    code: str | None
    name: str


@dataclasses.dataclass
class CreateUserResult(NoPydanticValidation):
    id: uuid.UUID
    name: str | None
    username: str | None
    email: str | None
    mobile: str | None
    org_type: CreateRoleResultOrgType | None
    departments: list[CreateUserResultDepartmentsItem]
    roles: list[CreateUserResultRolesItem]
    is_deleted: bool
    created_at: datetime.datetime
    last_login_at: datetime.datetime | None


@dataclasses.dataclass
class CreateUserResultDepartmentsItem(NoPydanticValidation):
    id: uuid.UUID
    code: str | None
    name: str


@dataclasses.dataclass
class CreateUserResultRolesItem(NoPydanticValidation):
    id: uuid.UUID
    code: str | None
    name: str


@dataclasses.dataclass
class DeleteOrgTypeResult(NoPydanticValidation):
    id: uuid.UUID
    name: str
    code: str | None


@dataclasses.dataclass
class DeleteOrganizationResult(NoPydanticValidation):
    id: uuid.UUID


@dataclasses.dataclass
class DeleteRoleResult(NoPydanticValidation):
    id: uuid.UUID


@dataclasses.dataclass
class DeleteUserResult(NoPydanticValidation):
    id: uuid.UUID
    name: str | None


@dataclasses.dataclass
class GetLoginSettingResult(NoPydanticValidation):
    id: uuid.UUID
    key: str
    value: str


@dataclasses.dataclass
class GetOrganizationNodeResult(NoPydanticValidation):
    id: uuid.UUID
    name: str
    code: str | None
    description: str | None
    parent_id: uuid.UUID | None
    is_enterprise: bool
    has_children: bool


@dataclasses.dataclass
class GetUserByAccountResult(NoPydanticValidation):
    id: uuid.UUID
    is_deleted: bool


@dataclasses.dataclass
class SendCodeResult(NoPydanticValidation):
    id: uuid.UUID
    created_at: datetime.datetime
    account: str
    code_type: AuthCodeType
    verify_type: AuthVerifyType
    expired_at: datetime.datetime
    ttl: int


@dataclasses.dataclass
class UpdateOrgTypeStatusResult(NoPydanticValidation):
    id: uuid.UUID
    name: str
    code: str | None
    is_deleted: bool


@dataclasses.dataclass
class UpdateRoleStatusResult(NoPydanticValidation):
    id: uuid.UUID
    name: str
    code: str | None
    is_deleted: bool


@dataclasses.dataclass
class UpdateUserStatusResult(NoPydanticValidation):
    id: uuid.UUID
    name: str | None
    is_deleted: bool


@dataclasses.dataclass
class UpsertLoginSettingResult(NoPydanticValidation):
    id: uuid.UUID


class ValidateCodeResult(typing.NamedTuple):
    status_code: AuthAuditStatusCode


@dataclasses.dataclass
class ValidatePwdResult(NoPydanticValidation):
    id: uuid.UUID
    hashed_password: str | None
    is_deleted: bool
    recent_failed_attempts: int


async def create_audit_log(
    executor: edgedb.AsyncIOExecutor,
    *,
    user_id: uuid.UUID,
    client_info: str,
    status_code: AuthAuditStatusCode,
    event_type: AuthAuditEventType,
) -> CreateAuditLogResult:
    return await executor.query_single(
        """\
        with
            module auth,
            user := (
                select default::User filter .id = <uuid>$user_id
            ),
            client_info := (
                <tuple<client_ip: str, user_agent: json>><json>$client_info
            ),
            status_code := <AuditStatusCode>$status_code
        select (
            insert AuditLog {
                client_ip := <str>client_info.client_ip,
                event_type := <AuditEventType>$event_type,
                status_code := status_code,
                raw_ua := <str>client_info.user_agent['raw_ua'],
                os := <str>client_info.user_agent['os'],
                device := <str>client_info.user_agent['device'],
                browser := <str>client_info.user_agent['browser'],
                user := user
            }
        ) {
            client_ip,
            os,
            device,
            browser,
            status_code,
            is_succeed,
            event_type,
            created_at,
            user: {
                username,
                mobile,
                email
            }
        };\
        """,
        user_id=user_id,
        client_info=client_info,
        status_code=status_code,
        event_type=event_type,
    )


async def create_department(
    executor: edgedb.AsyncIOExecutor,
    *,
    parent_id: uuid.UUID,
    name: str,
    code: str | None,
    description: str | None,
) -> CreateDepartmentResult | None:
    return await executor.query_single(
        """\
        WITH
            parent := (
                SELECT Organization FILTER .id = <uuid>$parent_id
            ),
            enterprise := assert_single((
                SELECT Enterprise FILTER (
                    .id = (
                        parent[is Enterprise].id ??
                        parent[is Department].enterprise.id
                    )
                )
            ))
        FOR _ IN (
            SELECT true FILTER EXISTS parent
        ) UNION (
            SELECT (
                INSERT Department {
                    name := <str>$name,
                    code := <optional str>$code,
                    description := <optional str>$description,
                    enterprise := enterprise,
                    parent := parent,
                    ancestors := (
                        SELECT DISTINCT (
                            SELECT .parent UNION .parent.ancestors
                        )
                    )
                }
            ) {
                name,
                code,
                description,
                parent: {
                    name,
                    code
                },
                enterprise: {
                    name,
                    code,
                }
            }
        );\
        """,
        parent_id=parent_id,
        name=name,
        code=code,
        description=description,
    )


async def create_enterprise(
    executor: edgedb.AsyncIOExecutor,
    *,
    org_type_id: uuid.UUID,
    name: str,
    code: str | None,
    tax_id: str | None,
    issuing_bank: str | None,
    bank_account_number: str | None,
    contact_address: str | None,
    contact_phone_num: str | None,
) -> CreateEnterpriseResult | None:
    return await executor.query_single(
        """\
        WITH
            org_type := (
                SELECT OrganizationType FILTER .id = <uuid>$org_type_id
            )
        FOR _ IN (
            SELECT true FILTER EXISTS org_type
        ) UNION (
            SELECT (
                INSERT Enterprise {
                    name := <str>$name,
                    code := <optional str>$code,
                    tax_id := <optional str>$tax_id,
                    issuing_bank := <optional str>$issuing_bank,
                    bank_account_number := <optional str>$bank_account_number,
                    contact_address := <optional str>$contact_address,
                    contact_phone_num := <optional str>$contact_phone_num,
                    org_type := org_type,
                    ancestors := ( SELECT org_type )
                }
            ) {
                name,
                code,
                tax_id,
                issuing_bank,
                bank_account_number,
                contact_address,
                contact_phone_num
            }
        );\
        """,
        org_type_id=org_type_id,
        name=name,
        code=code,
        tax_id=tax_id,
        issuing_bank=issuing_bank,
        bank_account_number=bank_account_number,
        contact_address=contact_address,
        contact_phone_num=contact_phone_num,
    )


async def create_org_type(
    executor: edgedb.AsyncIOExecutor,
    *,
    name: str,
    code: str,
    description: str | None,
) -> CreateOrgTypeResult:
    return await executor.query_single(
        """\
        WITH
            name := <str>$name,
            code := <str>$code,
            description := <optional str>$description
        SELECT (
            INSERT OrganizationType {
                name := name,
                code := code,
                description := description
            }
        ) { name, code, description, is_deleted, is_protected };\
        """,
        name=name,
        code=code,
        description=description,
    )


async def create_role(
    executor: edgedb.AsyncIOExecutor,
    *,
    name: str,
    code: str | None,
    description: str | None,
    org_type_id: uuid.UUID | None,
) -> CreateRoleResult:
    return await executor.query_single(
        """\
        SELECT (
            INSERT Role {
                name := <str>$name,
                code := <optional str>$code,
                description := <optional str>$description,
                org_type := (
                    SELECT OrganizationType
                    FILTER .id = <optional uuid>$org_type_id
                )
            }
        ) {
            name,
            code,
            description,
            org_type: {
                code,
                name,
            },
            is_deleted,
            created_at
        };\
        """,
        name=name,
        code=code,
        description=description,
        org_type_id=org_type_id,
    )


async def create_user(
    executor: edgedb.AsyncIOExecutor,
    *,
    name: str | None,
    username: str | None,
    email: str | None,
    mobile: str | None,
    hashed_password: str | None,
    organization_ids: list[uuid.UUID] | None,
    org_type_id: uuid.UUID | None,
) -> CreateUserResult:
    return await executor.query_single(
        """\
        WITH
            name := <optional str>$name,
            username := <optional str>$username,
            email := <optional str>$email,
            mobile := <optional str>$mobile,
            hashed_password := <optional str>$hashed_password,
            organization_ids := <optional array<uuid>>$organization_ids,
            org_type := (
                SELECT OrganizationType FILTER (
                    .id = <optional uuid>$org_type_id
                )
            ),
            organizations := (
                SELECT Organization
                FILTER
                    ( Organization IS NOT OrganizationType ) AND
                    (
                        false IF NOT EXISTS org_type ELSE
                        (
                            .id IN array_unpack(organization_ids) AND
                            org_type IN .ancestors
                        )
                    )
            )
        select (
            insert User {
                name := name,
                username := username,
                email := email,
                mobile := mobile,
                hashed_password := hashed_password,
                org_type := org_type,
                directly_organizations := organizations
            }
        ) {
            name,
            username,
            email,
            mobile,
            org_type: { code, name },
            departments := (
                SELECT .directly_organizations { code, name }
            ),
            roles: { code, name },
            is_deleted,
            created_at,
            last_login_at
        };\
        """,
        name=name,
        username=username,
        email=email,
        mobile=mobile,
        hashed_password=hashed_password,
        organization_ids=organization_ids,
        org_type_id=org_type_id,
    )


async def delete_org_type(
    executor: edgedb.AsyncIOExecutor,
    *,
    ids: list[uuid.UUID],
) -> list[DeleteOrgTypeResult]:
    return await executor.query(
        """\
        SELECT (
            DELETE OrganizationType
            FILTER .id in array_unpack(<array<uuid>>$ids) AND NOT .is_protected
        ) { name, code };\
        """,
        ids=ids,
    )


async def delete_organization(
    executor: edgedb.AsyncIOExecutor,
    *,
    ids: list[uuid.UUID],
) -> list[DeleteOrganizationResult]:
    return await executor.query(
        """\
        DELETE Organization FILTER .id in array_unpack(<array<uuid>>$ids);\
        """,
        ids=ids,
    )


async def delete_role(
    executor: edgedb.AsyncIOExecutor,
    *,
    ids: list[uuid.UUID],
) -> list[DeleteRoleResult]:
    return await executor.query(
        """\
        DELETE Role FILTER .id in array_unpack(<array<uuid>>$ids);\
        """,
        ids=ids,
    )


async def delete_user(
    executor: edgedb.AsyncIOExecutor,
    *,
    user_ids: list[uuid.UUID],
) -> list[DeleteUserResult]:
    return await executor.query(
        """\
        SELECT (
            DELETE User FILTER .id in array_unpack(<array<uuid>>$user_ids)
        ) { name } ORDER BY .created_at DESC;\
        """,
        user_ids=user_ids,
    )


async def get_department_by_id_or_code(
    executor: edgedb.AsyncIOExecutor,
    *,
    id: uuid.UUID | None,
    code: str | None,
    enterprise_id: uuid.UUID | None,
) -> CreateDepartmentResult | None:
    return await executor.query_single(
        """\
        WITH
            id := <optional uuid>$id,
            code := <optional str>$code,
            enterprise_id := <optional uuid>$enterprise_id
        SELECT assert_single(
            (
                SELECT Department {
                    name,
                    code,
                    description,
                    parent: {
                        name,
                        code
                    },
                    enterprise: {
                        name,
                        code,
                    }
                }
                FILTER
                    (.id = id) ??
                    (.code ?= code AND .enterprise.id = enterprise_id)
            )
        );\
        """,
        id=id,
        code=code,
        enterprise_id=enterprise_id,
    )


async def get_enterprise_by_id_or_code(
    executor: edgedb.AsyncIOExecutor,
    *,
    id: uuid.UUID | None,
    code: str | None,
    org_type_id: uuid.UUID | None,
    org_type_code: str | None,
) -> CreateEnterpriseResult | None:
    return await executor.query_single(
        """\
        WITH
            id := <optional uuid>$id,
            code := <optional str>$code,
            org_type_id := <optional uuid>$org_type_id,
            org_type_code := <optional str>$org_type_code
        SELECT assert_single(
            (
                SELECT Enterprise {
                    name,
                    code,
                    tax_id,
                    issuing_bank,
                    bank_account_number,
                    contact_address,
                    contact_phone_num
                }
                FILTER
                    (.id = id) ??
                    (.code ?= code AND .org_type.id = org_type_id) ??
                    (.code ?= code AND .org_type.code = org_type_code)
            )
        );\
        """,
        id=id,
        code=code,
        org_type_id=org_type_id,
        org_type_code=org_type_code,
    )


async def get_login_setting(
    executor: edgedb.AsyncIOExecutor,
) -> list[GetLoginSettingResult]:
    return await executor.query(
        """\
        SELECT LoginSetting { key, value } ORDER BY .key;\
        """,
    )


async def get_login_setting_by_key(
    executor: edgedb.AsyncIOExecutor,
    *,
    key: str,
) -> GetLoginSettingResult | None:
    return await executor.query_single(
        """\
        SELECT LoginSetting { key, value } FILTER .key = <str>$key;\
        """,
        key=key,
    )


async def get_org_type_by_id_or_code(
    executor: edgedb.AsyncIOExecutor,
    *,
    id: uuid.UUID | None,
    code: str | None,
) -> CreateOrgTypeResult | None:
    return await executor.query_single(
        """\
        WITH
            id := <optional uuid>$id,
            code := <optional str>$code
        SELECT assert_single(
            (
                SELECT OrganizationType {
                    name,
                    code,
                    description,
                    is_deleted,
                    is_protected
                }
                FILTER (.id = id) ?? (.code = code)
            )
        );\
        """,
        id=id,
        code=code,
    )


async def get_organization_node(
    executor: edgedb.AsyncIOExecutor,
    *,
    org_type_id: uuid.UUID | None,
    org_type_code: str | None,
    parent_id: uuid.UUID | None,
) -> list[GetOrganizationNodeResult]:
    return await executor.query(
        """\
        WITH
            ot_id := <optional uuid>$org_type_id,
            ot_code := <optional str>$org_type_code,
            parent_id := <optional uuid>$parent_id
        SELECT
            Organization {
                name,
                code,
                [IS Department].description,
                parent_id := [IS Department].parent.id,
                is_enterprise := Organization is Enterprise,
                has_children := EXISTS .directly_children
            }
        FILTER (
            [IS Department].parent.id ?= parent_id IF EXISTS parent_id ELSE
            [IS Enterprise].org_type.id ?= ot_id IF EXISTS ot_id ELSE
            ([IS Enterprise].org_type.code = ot_code)
        )
        ORDER BY .created_at;\
        """,
        org_type_id=org_type_id,
        org_type_code=org_type_code,
        parent_id=parent_id,
    )


async def get_role_by_id_or_code(
    executor: edgedb.AsyncIOExecutor,
    *,
    id: uuid.UUID | None,
    code: str | None,
) -> CreateRoleResult | None:
    return await executor.query_single(
        """\
        WITH
            id := <optional uuid>$id,
            code := <optional str>$code
        SELECT assert_single(
            (
                SELECT Role {
                    name,
                    code,
                    description,
                    org_type: {
                        code,
                        name,
                    },
                    is_deleted,
                    created_at
                }
                FILTER (.id = id) ?? (.code_upper = str_upper(code))
            )
        );\
        """,
        id=id,
        code=code,
    )


async def get_user_by_account(
    executor: edgedb.AsyncIOExecutor,
    *,
    username: str | None,
    mobile: str | None,
    email: str | None,
) -> GetUserByAccountResult | None:
    return await executor.query_single(
        """\
        WITH
            username := <optional str>$username,
            mobile := <optional str>$mobile,
            email := <optional str>$email
        SELECT
            User { id, is_deleted }
        FILTER (
            .username ?= username IF EXISTS username ELSE
            .mobile ?= mobile IF EXISTS mobile ELSE
            .email ?= email IF EXISTS email ELSE false
        )
        LIMIT 1;\
        """,
        username=username,
        mobile=mobile,
        email=email,
    )


async def get_user_by_id(
    executor: edgedb.AsyncIOExecutor,
    *,
    id: uuid.UUID,
) -> CreateUserResult | None:
    return await executor.query_single(
        """\
        SELECT
            User {
                name,
                username,
                email,
                mobile,
                org_type: { code, name },
                departments := (
                    SELECT .directly_organizations { code, name }
                ),
                roles: { code, name },
                is_deleted,
                created_at,
                last_login_at
            }
        FILTER .id = <uuid>$id;\
        """,
        id=id,
    )


async def organization_add_member(
    executor: edgedb.AsyncIOExecutor,
    *,
    user_ids: list[uuid.UUID],
    organization_ids: list[uuid.UUID],
    org_type_id: uuid.UUID,
) -> list[CreateUserResult]:
    return await executor.query(
        """\
        WITH
            user_ids := <array<uuid>>$user_ids,
            organization_ids := <array<uuid>>$organization_ids,
            org_type := (
                SELECT OrganizationType FILTER (
                    .id = <uuid>$org_type_id
                )
            ),
            organizations := (
                SELECT Organization
                FILTER
                    ( Organization IS NOT OrganizationType ) AND
                    (
                        false IF NOT EXISTS org_type ELSE
                        (
                            .id IN array_unpack(organization_ids) AND
                            org_type IN .ancestors
                        )
                    )
            )
        SELECT (
            UPDATE User FILTER
                .id in array_unpack(user_ids) AND
                (
                    NOT EXISTS .org_type OR
                    .org_type ?= org_type
                )
            SET {
                org_type := org_type,
                directly_organizations += organizations
            }
        ) {
            name,
            username,
            email,
            mobile,
            org_type: { code, name },
            departments := (
                SELECT .directly_organizations { code, name }
            ),
            roles: { code, name },
            is_deleted,
            created_at,
            last_login_at
        };\
        """,
        user_ids=user_ids,
        organization_ids=organization_ids,
        org_type_id=org_type_id,
    )


async def query_org_types(
    executor: edgedb.AsyncIOExecutor,
) -> list[CreateOrgTypeResult]:
    return await executor.query(
        """\
        SELECT OrganizationType {
            name, code, description, is_deleted, is_protected
        } ORDER BY
            .is_deleted THEN
            .is_protected DESC THEN
            .code;\
        """,
    )


async def resign_user(
    executor: edgedb.AsyncIOExecutor,
    *,
    is_deleted: bool | None,
    user_ids: list[uuid.UUID],
) -> list[DeleteUserResult]:
    return await executor.query(
        """\
        SELECT (
            WITH is_deleted := <optional bool>$is_deleted,
            UPDATE User FILTER .id in array_unpack(<array<uuid>>$user_ids)
            SET {
                directly_organizations := {},
                org_type := {},
                roles := {},
                deleted_at := (
                    datetime_of_transaction() IF is_deleted ELSE .deleted_at
                )
            }
        ) { name } ORDER BY .created_at DESC;\
        """,
        is_deleted=is_deleted,
        user_ids=user_ids,
    )


async def role_bind_users(
    executor: edgedb.AsyncIOExecutor,
    *,
    user_ids: list[uuid.UUID],
    role_ids: list[uuid.UUID],
) -> list[CreateUserResult]:
    return await executor.query(
        """\
        WITH
            user_ids := <array<uuid>>$user_ids,
            role_ids := <array<uuid>>$role_ids
        SELECT (
            UPDATE User FILTER .id in array_unpack(user_ids)
            SET {
                roles += (
                    SELECT Role
                    FILTER
                        .id IN array_unpack(role_ids) AND
                        (
                            NOT EXISTS .org_type OR
                            .org_type ?= User.org_type
                        )
                )
            }
        ) {
            name,
            username,
            email,
            mobile,
            org_type: { code, name },
            departments := (
                SELECT .directly_organizations { code, name }
            ),
            roles: { code, name },
            is_deleted,
            created_at,
            last_login_at
        };\
        """,
        user_ids=user_ids,
        role_ids=role_ids,
    )


async def role_unbind_users(
    executor: edgedb.AsyncIOExecutor,
    *,
    user_ids: list[uuid.UUID],
    role_ids: list[uuid.UUID],
) -> list[CreateUserResult]:
    return await executor.query(
        """\
        WITH
            user_ids := <array<uuid>>$user_ids,
            role_ids := <array<uuid>>$role_ids
        SELECT (
            UPDATE User FILTER .id in array_unpack(user_ids)
            SET {
                roles -= (
                    SELECT Role
                    FILTER .id IN array_unpack(role_ids)
                )
            }
        ) {
            name,
            username,
            email,
            mobile,
            org_type: { code, name },
            departments := (
                SELECT .directly_organizations { code, name }
            ),
            roles: { code, name },
            is_deleted,
            created_at,
            last_login_at
        };\
        """,
        user_ids=user_ids,
        role_ids=role_ids,
    )


async def send_code(
    executor: edgedb.AsyncIOExecutor,
    *,
    account: str,
    code_type: AuthCodeType,
    verify_type: AuthVerifyType,
    code: str,
    ttl: int,
    max_attempts: int | None,
    attempts_ttl: int | None,
) -> SendCodeResult | None:
    return await executor.query_single(
        """\
        WITH
            account := <str>$account,
            code_type := <auth::CodeType>$code_type,
            verify_type := <auth::VerifyType>$verify_type,
            code := <str>$code,
            ttl := <int16>$ttl,
            max_attempts := <optional int64>$max_attempts,
            attempts_ttl := <optional int16>$attempts_ttl,
            sent_records := (
                SELECT auth::VerifyRecord
                FILTER (
                    EXISTS max_attempts
                    AND .account = account
                    AND .code_type  = code_type
                    AND .verify_type = verify_type
                    AND .created_at >= (
                        datetime_of_transaction() -
                        cal::to_relative_duration(minutes := attempts_ttl)
                    )
                )
            ),
        FOR _ IN (
            SELECT true FILTER
                (count(sent_records) < max_attempts) ?? true
        ) UNION (
            SELECT (
                INSERT auth::VerifyRecord {
                    account := account,
                    code_type := code_type,
                    verify_type := verify_type,
                    code := code,
                    expired_at := (
                        datetime_of_transaction() +
                        cal::to_relative_duration(seconds := ttl)
                    )
                }
            ) {
                created_at,
                account,
                code_type,
                verify_type,
                expired_at,
                ttl := ttl
            }
        );\
        """,
        account=account,
        code_type=code_type,
        verify_type=verify_type,
        code=code,
        ttl=ttl,
        max_attempts=max_attempts,
        attempts_ttl=attempts_ttl,
    )


async def sign_in(
    executor: edgedb.AsyncIOExecutor,
    *,
    client_info: str,
    id: uuid.UUID,
    access_token: str,
) -> CreateUserResult | None:
    return await executor.query_single(
        """\
        WITH
            client_info := (
                <tuple<client_ip: str, user_agent: json>><json>$client_info
            ),
            user := (
                UPDATE User
                FILTER .id = <uuid>$id
                SET { last_login_at := datetime_of_transaction() }
            ),
            token := (
                INSERT auth::Token {
                    access_token := <str>$access_token,
                    user := user
                }
            ),
            audit_log := (
                INSERT auth::AuditLog {
                    client_ip := client_info.client_ip,
                    event_type := auth::AuditEventType.SignIn,
                    status_code := auth::AuditStatusCode.OK,
                    raw_ua := <str>client_info.user_agent['raw_ua'],
                    os := <str>client_info.user_agent['os'],
                    device := <str>client_info.user_agent['device'],
                    browser := <str>client_info.user_agent['browser'],
                    user := user
                }
            )
        SELECT user {
            name,
            username,
            email,
            mobile,
            org_type: { code, name },
            departments := (
                SELECT .directly_organizations { code, name }
            ),
            roles: { code, name },
            is_deleted,
            created_at,
            last_login_at
        };\
        """,
        client_info=client_info,
        id=id,
        access_token=access_token,
    )


async def sign_up(
    executor: edgedb.AsyncIOExecutor,
    *,
    name: str | None,
    username: str,
    email: str | None,
    mobile: str | None,
    hashed_password: str,
    client_info: str,
) -> CreateUserResult:
    return await executor.query_single(
        """\
        WITH
            name := <optional str>$name,
            username := <str>$username,
            email := <optional str>$email,
            mobile := <optional str>$mobile,
            hashed_password := <str>$hashed_password,
            client_info := (
                <tuple<client_ip: str, user_agent: json>><json>$client_info
            ),
            user := (
                INSERT User {
                    name := name,
                    username := username,
                    email := email,
                    mobile := mobile,
                    hashed_password := hashed_password
                }
            ),
            audit_log := (
                INSERT auth::AuditLog {
                    client_ip := client_info.client_ip,
                    event_type := auth::AuditEventType.SignUp,
                    status_code := auth::AuditStatusCode.OK,
                    raw_ua := <str>client_info.user_agent['raw_ua'],
                    os := <str>client_info.user_agent['os'],
                    device := <str>client_info.user_agent['device'],
                    browser := <str>client_info.user_agent['browser'],
                    user := user
                }
            )
        SELECT user {
            name,
            username,
            email,
            mobile,
            org_type: { code, name },
            departments := (
                SELECT .directly_organizations { code, name }
            ),
            roles: { code, name },
            is_deleted,
            created_at,
            last_login_at
        };\
        """,
        name=name,
        username=username,
        email=email,
        mobile=mobile,
        hashed_password=hashed_password,
        client_info=client_info,
    )


async def update_department(
    executor: edgedb.AsyncIOExecutor,
    *,
    id: uuid.UUID | None,
    current_code: str | None,
    enterprise_id: uuid.UUID | None,
    parent_id: uuid.UUID,
    name: str,
    code: str | None,
    description: str | None,
) -> CreateDepartmentResult | None:
    return await executor.query_single(
        """\
        WITH
            id := <optional uuid>$id,
            current_code := <optional str>$current_code,
            enterprise_id := <optional uuid>$enterprise_id,
            parent := (
                SELECT Organization FILTER .id = <uuid>$parent_id
            ),
            parent_is_enterprise := EXISTS parent[is Enterprise],
            enterprise := assert_single((
                SELECT Enterprise FILTER .id = (
                    parent[is Enterprise].id IF parent_is_enterprise ELSE
                    parent[is Department].enterprise.id
                )
            )),
            department := assert_single((
                SELECT Department
                FILTER
                    (.id = id) ??
                    (
                        .code ?= current_code AND
                        .enterprise.id = enterprise_id
                    ) ??
                    false
            ))
        SELECT (
            UPDATE department
            SET {
                name := <str>$name,
                code := <optional str>$code,
                description := <optional str>$description,
                enterprise := enterprise,
                parent := parent,
                ancestors := (
                    SELECT DISTINCT (
                        SELECT .parent UNION .parent.ancestors
                    )
                )
            }
        ) {
            name,
            code,
            description,
            parent: {
                name,
                code
            },
            enterprise: {
                name,
                code,
            }
        };\
        """,
        id=id,
        current_code=current_code,
        enterprise_id=enterprise_id,
        parent_id=parent_id,
        name=name,
        code=code,
        description=description,
    )


async def update_enterprise(
    executor: edgedb.AsyncIOExecutor,
    *,
    id: uuid.UUID | None,
    current_code: str | None,
    org_type_id: uuid.UUID | None,
    org_type_code: str | None,
    name: str,
    code: str | None,
    tax_id: str | None,
    issuing_bank: str | None,
    bank_account_number: str | None,
    contact_address: str | None,
    contact_phone_num: str | None,
) -> CreateEnterpriseResult | None:
    return await executor.query_single(
        """\
        WITH
            id := <optional uuid>$id,
            current_code := <optional str>$current_code,
            org_type_id := <optional uuid>$org_type_id,
            org_type_code := <optional str>$org_type_code,
            enterprise := assert_single((
                SELECT Enterprise
                FILTER
                    (.id = id) ??
                    (.code ?= current_code AND .org_type.id = org_type_id) ??
                    (
                        .code ?= current_code AND
                        .org_type.code = org_type_code
                    ) ??
                    false
            ))
        SELECT (
            UPDATE enterprise
            SET {
                name := <str>$name,
                code := <optional str>$code,
                tax_id := <optional str>$tax_id,
                issuing_bank := <optional str>$issuing_bank,
                bank_account_number := <optional str>$bank_account_number,
                contact_address := <optional str>$contact_address,
                contact_phone_num := <optional str>$contact_phone_num,
            }
        ) {
            name,
            code,
            tax_id,
            issuing_bank,
            bank_account_number,
            contact_address,
            contact_phone_num
        };\
        """,
        id=id,
        current_code=current_code,
        org_type_id=org_type_id,
        org_type_code=org_type_code,
        name=name,
        code=code,
        tax_id=tax_id,
        issuing_bank=issuing_bank,
        bank_account_number=bank_account_number,
        contact_address=contact_address,
        contact_phone_num=contact_phone_num,
    )


async def update_org_type(
    executor: edgedb.AsyncIOExecutor,
    *,
    id: uuid.UUID | None,
    current_code: str | None,
    name: str | None,
    code: str | None,
    description: str | None,
    is_deleted: bool | None,
) -> CreateOrgTypeResult | None:
    return await executor.query_single(
        """\
        WITH
            id := <optional uuid>$id,
            current_code := <optional str>$current_code,
            name := <optional str>$name,
            code := <optional str>$code,
            description := <optional str>$description,
            is_deleted := <optional bool>$is_deleted,
            org_type := assert_single((
                SELECT OrganizationType
                FILTER (.id = id) ?? (.code = code)
            ))
        SELECT (
            UPDATE org_type
            SET {
                name := name ?? .name,
                code := code ?? .code,
                description := description ?? .description,
                deleted_at := (
                    .deleted_at IF NOT EXISTS is_deleted ELSE
                    datetime_of_transaction()
                    IF is_deleted AND NOT .is_protected ELSE {}
                )
            }
        ) { name, code, description, is_deleted, is_protected };\
        """,
        id=id,
        current_code=current_code,
        name=name,
        code=code,
        description=description,
        is_deleted=is_deleted,
    )


async def update_org_type_status(
    executor: edgedb.AsyncIOExecutor,
    *,
    is_deleted: bool,
    ids: list[uuid.UUID],
) -> list[UpdateOrgTypeStatusResult]:
    return await executor.query(
        """\
        WITH
            is_deleted := <bool>$is_deleted
        SELECT (
            UPDATE OrganizationType
            FILTER .id in array_unpack(<array<uuid>>$ids) AND NOT .is_protected
            SET {
                deleted_at := datetime_of_transaction() IF is_deleted ELSE {}
            }
        ) { name, code, is_deleted };\
        """,
        is_deleted=is_deleted,
        ids=ids,
    )


async def update_role(
    executor: edgedb.AsyncIOExecutor,
    *,
    id: uuid.UUID | None,
    current_code: str | None,
    is_deleted: bool | None,
    name: str,
    code: str | None,
    description: str | None,
) -> CreateRoleResult | None:
    return await executor.query_single(
        """\
        WITH
            id := <optional uuid>$id,
            current_code := <optional str>$current_code,
            is_deleted := <optional bool>$is_deleted,
            role := assert_single((
                SELECT Role
                FILTER
                    (.id = id) ??
                    (.code_upper ?= str_upper(current_code)) ??
                    false
            ))
        SELECT (
            UPDATE role
            SET {
                name := <str>$name,
                code := <optional str>$code,
                description := <optional str>$description,
                deleted_at := (
                    .deleted_at IF NOT EXISTS is_deleted ELSE
                    datetime_of_transaction() IF is_deleted ELSE {}
                )
            }
        ) {
            name,
            code,
            description,
            org_type: {
                code,
                name,
            },
            is_deleted,
            created_at
        };\
        """,
        id=id,
        current_code=current_code,
        is_deleted=is_deleted,
        name=name,
        code=code,
        description=description,
    )


async def update_role_status(
    executor: edgedb.AsyncIOExecutor,
    *,
    ids: list[uuid.UUID],
    is_deleted: bool,
) -> list[UpdateRoleStatusResult]:
    return await executor.query(
        """\
        SELECT (
            UPDATE Role
            FILTER .id in array_unpack(<array<uuid>>$ids)
            SET {
                deleted_at := (
                    datetime_of_transaction() IF <bool>$is_deleted ELSE {}
                )
            }
        ) { name, code, is_deleted };\
        """,
        ids=ids,
        is_deleted=is_deleted,
    )


async def update_user(
    executor: edgedb.AsyncIOExecutor,
    *,
    name: str | None,
    username: str | None,
    email: str | None,
    mobile: str | None,
    id: uuid.UUID,
) -> CreateUserResult | None:
    return await executor.query_single(
        """\
        WITH
            name := <optional str>$name,
            username := <optional str>$username,
            email := <optional str>$email,
            mobile := <optional str>$mobile
        SELECT (
            UPDATE User FILTER .id = <uuid>$id
            SET {
                name := name,
                username := username,
                email := email,
                mobile := mobile
            }
        ) {
            name,
            username,
            email,
            mobile,
            org_type: { code, name },
            departments := (
                SELECT .directly_organizations { code, name }
            ),
            roles: { code, name },
            is_deleted,
            created_at,
            last_login_at
        };\
        """,
        name=name,
        username=username,
        email=email,
        mobile=mobile,
        id=id,
    )


async def update_user_organization(
    executor: edgedb.AsyncIOExecutor,
    *,
    id: uuid.UUID,
    organization_ids: list[uuid.UUID],
) -> CreateUserResult | None:
    return await executor.query_single(
        """\
        SELECT (
            UPDATE User FILTER .id = <uuid>$id
            SET {
                directly_organizations := (
                    SELECT Organization
                    FILTER
                        ( Organization IS NOT OrganizationType ) AND
                        (
                            false IF NOT EXISTS User.org_type ELSE
                            (
                                .id IN array_unpack(
                                    <array<uuid>>$organization_ids
                                ) AND
                                User.org_type IN .ancestors
                            )
                        )
                )
            }
        ) {
            name,
            username,
            email,
            mobile,
            org_type: { code, name },
            departments := (
                SELECT .directly_organizations { code, name }
            ),
            roles: { code, name },
            is_deleted,
            created_at,
            last_login_at
        };\
        """,
        id=id,
        organization_ids=organization_ids,
    )


async def update_user_roles(
    executor: edgedb.AsyncIOExecutor,
    *,
    id: uuid.UUID,
    role_ids: list[uuid.UUID] | None,
) -> CreateUserResult | None:
    return await executor.query_single(
        """\
        WITH
            user_id := <uuid>$id,
            role_ids := <optional array<uuid>>$role_ids
        SELECT (
            UPDATE User FILTER .id = user_id
            SET {
                roles := (
                    SELECT Role
                    FILTER
                        .id IN array_unpack(role_ids) AND
                        (
                            NOT EXISTS .org_type OR
                            .org_type ?= User.org_type
                        )
                )
            }
        ) {
            name,
            username,
            email,
            mobile,
            org_type: { code, name },
            departments := (
                SELECT .directly_organizations { code, name }
            ),
            roles: { code, name },
            is_deleted,
            created_at,
            last_login_at
        };\
        """,
        id=id,
        role_ids=role_ids,
    )


async def update_user_status(
    executor: edgedb.AsyncIOExecutor,
    *,
    user_ids: list[uuid.UUID],
    is_deleted: bool,
) -> list[UpdateUserStatusResult]:
    return await executor.query(
        """\
        WITH
            user_ids := <array<uuid>>$user_ids,
            is_deleted := <bool>$is_deleted
        SELECT (
            UPDATE User FILTER .id in array_unpack(user_ids)
            SET {
                deleted_at := datetime_of_transaction() if is_deleted else {}
            }
        ) {
            name,
            is_deleted
        } ORDER BY .created_at DESC;\
        """,
        user_ids=user_ids,
        is_deleted=is_deleted,
    )


async def upsert_login_setting(
    executor: edgedb.AsyncIOExecutor,
    *,
    configs: str,
) -> list[UpsertLoginSettingResult]:
    return await executor.query(
        """\
        FOR x IN json_object_unpack(<json>$configs)
        UNION (
            INSERT LoginSetting {
                key := x.0,
                value := to_str(x.1)
            } UNLESS CONFLICT ON (.key) ELSE (
                UPDATE LoginSetting SET { value := to_str(x.1)}
            )
        );\
        """,
        configs=configs,
    )


async def validate_code(
    executor: edgedb.AsyncIOExecutor,
    *,
    account: str,
    code_type: AuthCodeType,
    verify_type: AuthVerifyType,
    code: str,
    max_attempts: int | None,
) -> ValidateCodeResult:
    return await executor.query_single(
        """\
        with
            module auth,
            account := <str>$account,
            code_type := <CodeType>$code_type,
            verify_type := <VerifyType>$verify_type,
            code := <str>$code,
            max_attempts := <optional int64>$max_attempts,
            consumable_record := (
                select VerifyRecord
                filter .account = account
                    and .code_type  = code_type
                    and .verify_type = verify_type
                    and .consumable
                    and (.incorrect_attempts <= max_attempts) ?? true
            ),
            record := ( select consumable_record filter .code = code ),
            valid_record := (
                update record
                filter .expired_at > datetime_of_transaction()
                set {
                    consumed_at := datetime_of_transaction()
                }
            ),
            incorrect_record := (
                update consumable_record
                filter exists max_attempts and not exists record
                set {
                    incorrect_attempts := .incorrect_attempts + 1,
                    expired_at := (
                        datetime_of_transaction() if
                        .incorrect_attempts = max_attempts - 1 else
                        .expired_at
                    )
                }
            ),
            code_attempts_exceeded := any(
                (incorrect_record.incorrect_attempts >= max_attempts) ?? false
            ),
            status_code := (
                AuditStatusCode.INVALID_CODE
                if not exists consumable_record
                else AuditStatusCode.CODE_ATTEMPTS_EXCEEDED
                if code_attempts_exceeded
                else AuditStatusCode.CODE_INCORRECT
                if not exists record
                else AuditStatusCode.CODE_EXPIRED
                if not exists valid_record
                else AuditStatusCode.OK
            )
        select (
            status_code := status_code,
        );\
        """,
        account=account,
        code_type=code_type,
        verify_type=verify_type,
        code=code,
        max_attempts=max_attempts,
    )


async def validate_pwd(
    executor: edgedb.AsyncIOExecutor,
    *,
    username: str | None,
    mobile: str | None,
    email: str | None,
    interval: int | None,
) -> ValidatePwdResult | None:
    return await executor.query_single(
        """\
        with
            module auth,
            username := <optional str>$username,
            mobile := <optional str>$mobile,
            email := <optional str>$email,
            interval := <optional int64>$interval,
            user := assert_single((
                select default::User
                filter
                    (exists username and .username ?= username) or
                    (exists mobile and .mobile ?= mobile) or
                    (exists email and .email ?= email)
            )),
            recent_success_attempt := (
                select AuditLog
                filter
                    .user = user
                    and .event_type = AuditEventType.SignIn
                    and .status_code = AuditStatusCode.OK
                    and .created_at >= (
                        datetime_of_statement() -
                        cal::to_relative_duration(minutes := interval)
                    )
                limit 1
            ),
            recent_failed_attempts := (
                select AuditLog
                filter
                    .user = user
                    and .event_type = AuditEventType.SignIn
                    and .status_code = AuditStatusCode.INVALID_PASSWORD
                    and (
                        .created_at >= recent_success_attempt.created_at
                        if exists recent_success_attempt else
                        .created_at >= (
                            datetime_of_statement() -
                            cal::to_relative_duration(minutes := interval)
                        )
                    )
            )
        select user {
            hashed_password,
            is_deleted,
            recent_failed_attempts := count(recent_failed_attempts)
        };\
        """,
        username=username,
        mobile=mobile,
        email=email,
        interval=interval,
    )
