# AUTOGENERATED FROM:
#     'src/freeauth/queries/admin/create_user.edgeql'
#     'src/freeauth/queries/admin/delete_user.edgeql'
#     'src/freeauth/queries/admin/get_user_by_id.edgeql'
#     'src/freeauth/queries/admin/update_user.edgeql'
# WITH:
#     $ edgedb-py --file src/freeauth/queries/query_api.py


from __future__ import annotations

import dataclasses
import datetime
import uuid

import edgedb


class NoPydanticValidation:
    @classmethod
    def __get_validators__(cls):
        from pydantic.dataclasses import dataclass as pydantic_dataclass

        pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class CreateUserResult(NoPydanticValidation):
    id: uuid.UUID
    username: str | None
    email: str | None
    created_at: datetime.datetime


@dataclasses.dataclass
class DeleteUserResult(NoPydanticValidation):
    id: uuid.UUID
    username: str | None


async def create_user(
    executor: edgedb.AsyncIOExecutor,
    *,
    username: str,
    email: str | None,
    hashed_password: str | None,
) -> CreateUserResult:
    return await executor.query_single(
        """\
        with
            username := <str>$username,
            email := <optional str>$email,
            hashed_password := <optional str>$hashed_password
        select (
            insert User {
                username := username,
                email := email,
                hashed_password := hashed_password
            }
        ) {id, username, email, created_at};\
        """,
        username=username,
        email=email,
        hashed_password=hashed_password,
    )


async def delete_user(
    executor: edgedb.AsyncIOExecutor,
    *,
    id: uuid.UUID,
) -> list[DeleteUserResult]:
    return await executor.query(
        """\
        with
            user := (delete User filter .id = <uuid>$id)
        select
            User {id, username};\
        """,
        id=id,
    )


async def get_user_by_id(
    executor: edgedb.AsyncIOExecutor,
    *,
    id: uuid.UUID,
) -> CreateUserResult | None:
    return await executor.query_single(
        """\
        select
            User {id, username, email, created_at}
        filter .id = <uuid>$id;\
        """,
        id=id,
    )


async def update_user(
    executor: edgedb.AsyncIOExecutor,
    *,
    username: str | None,
    email: str | None,
    hashed_password: str | None,
    id: uuid.UUID,
) -> CreateUserResult | None:
    return await executor.query_single(
        """\
        with
            username := <optional str>$username,
            email := <optional str>$email,
            hashed_password := <optional str>$hashed_password
        select (
            update User filter .id = <uuid>$id
            set {
                username := username,
                email := email,
                hashed_password := hashed_password
            }
        ) {id, username, email, created_at};\
        """,
        username=username,
        email=email,
        hashed_password=hashed_password,
        id=id,
    )
